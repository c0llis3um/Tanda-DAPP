// import { readFile } from 'fs/promises';
// import {
//   AccountInfo,
//   Connection,
//   Keypair,
//   PublicKey,
//   Transaction,
// } from '@solana/web3.js';
// import { deserialize, serialize } from 'borsh';
// import { sign } from 'tweetnacl';
// import {
//   deleteNameRegistry,
//   NAME_PROGRAM_ID,
//   transferNameOwnership,
//   updateNameRegistryData,
// } from './bindings';
// import { NameRegistryState } from './state';
// import {
//   getFilteredProgramAccounts,
//   getHashedName,
//   getNameAccountKey,
//   Numberu32,
//   Numberu64,
//   signAndSendTransactionInstructions,
// } from './utils';
// import {
//   changeTwitterRegistryData,
//   changeVerifiedPubkey,
//   createVerifiedTwitterRegistry,
//   deleteTwitterRegistry,
//   ReverseTwitterRegistryState,
//   TWITTER_ROOT_PARENT_REGISTRY_KEY,
//   TWITTER_VERIFICATION_AUTHORITY,
// } from './twitter';
// import { createNameRegistry } from './bindings';
// import { fileURLToPath } from 'node:url';
// // const ENDPOINT = 'https://api.devnet.solana.com/';
// const ENDPOINT = 'https://solana-api.projectserum.com/';

// ////////////////////////////////////////////////////
// // Global Variables

// export const TWITTER_VERIFICATION_AUTHORITY_OLD = new PublicKey(
//   '867BLob5b52i81SNaV9Awm5ejkZV6VGSv9SxLcwukDDJ'
// );
// // The address of the name registry that will be a parent to all twitter handle registries,
// // it should be owned by the TWITTER_VERIFICATION_AUTHORITY and it's name is irrelevant
// export const TWITTER_ROOT_PARENT_REGISTRY_KEY_OLD = new PublicKey(
//   'AFrGkxNmVLBn3mKhvfJJABvm8RJkTtRhHDoaF97pQZaA'
// );

// export async function updateTwitterRegistries() {
//   // Transition:]
//   // TODO Set up new auth and parent in glaobl var
//   //    - Set up test UI with new methods
//   //    - Run script with new AUTH and PARENT OR just new reverse regs
//   //    - Switch UIs
//   ///////////////////////////////////////////////////
//   ///////////////////////////////////////////////////

//   //   const instruction = await createNameRegistry(
//   //     connection,
//   //     'twitter-TLD',
//   //     500,
//   //     payerAccount.publicKey,
//   //     newAuthorityAccount.publicKey
//   //   );

//   //   const tx = await signAndSendTransactionInstructions(
//   //     connection,
//   //     [],
//   //     newAuthorityAccount,
//   //     [instruction]
//   //   );

//   //   console.log(tx);

//   //   return;
//   ///////////////////////////////////////////////////
//   // Get handles from reverse registries
//   const reverseFilters = [
//     {
//       memcmp: {
//         offset: 0,
//         bytes: new PublicKey(Buffer.alloc(32, 0)).toBase58(),
//       },
//     },
//     {
//       memcmp: {
//         offset: 64,
//         bytes: TWITTER_VERIFICATION_AUTHORITY_OLD.toBase58(),
//       },
//     },
//   ];
//   const reverseRegistries = await getFilteredProgramAccounts(
//     connection,
//     NAME_PROGRAM_ID,
//     reverseFilters
//   );
//   let handles: [string, string, number][] = [];
//   for (const f of reverseRegistries) {
//     if (f.accountInfo.data.length >= NameRegistryState.HEADER_LEN) {
//       let data = f.accountInfo.data.slice(0, NameRegistryState.HEADER_LEN);
//       let state: NameRegistryState = deserialize(
//         NameRegistryState.schema,
//         NameRegistryState,
//         data
//       );
//       let handle = f.accountInfo.data
//         .slice(NameRegistryState.HEADER_LEN)
//         .toString();
//       if (handle.length > 0) {
//         handles.push([
//           handle.substr(0, handle.indexOf('\0')),
//           state.owner.toString(),
//           f.accountInfo.data.length - NameRegistryState.HEADER_LEN,
//         ]);
//       }
//     }
//   }
//   let keys = handles.map((e) => e[1]);
//   if (keys.length !== [...new Set(keys)].length) {
//     throw new Error('There are duplicates!');
//   }

//   // strip @
//   handles = handles.map((e) => [e[0].replace('@', ''), e[1], e[2]]);
//   for (let e of handles) {
//     console.log(e);
//   }
//   // Set up the new registries
//   let i = 0;
//   for (let e of handles) {
//     i += 1;
//     console.log(`Etape ${i} - sur ${handles.length}`);
//     // Skip my own usernames
//     if (e[0].includes('FtxSniper') || e[0].includes('AudeJavel10')) {
//       console.log(`Skipping one of your account ${e}`);
//       continue;
//     }
//     try {
//       let create_instruction = await createVerifiedTwitterRegistry(
//         connection,
//         e[0],
//         new PublicKey(e[1]),
//         e[2],
//         payerAccount.publicKey
//       );
//       console.log(
//         await signAndSendTransactionInstructions(
//           connection,
//           [newAuthorityAccount],
//           payerAccount,
//           create_instruction
//         )
//       );
//     } catch (err) {
//       console.log('Error', err, e);
//     }
//   }
//   console.log(
//     handles.length * (await connection.getMinimumBalanceForRentExemption(32))
//   );
// }
// updateTwitterRegistries();
