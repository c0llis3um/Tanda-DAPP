{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useMemo}from'react';import{clusterApiUrl,Connection}from'@solana/web3.js';import tuple from'immutable-tuple';import*as anchor from'@project-serum/anchor';import{useLocalStorageState,useRefEqual}from'./utils';import{refreshCache,setCache,useAsyncData}from'./fetch-loop';var ConnectionContext=/*#__PURE__*/React.createContext(null);export var MAINNET_URL='https://solana-api.projectserum.com';// No backup url for now. Leave the variable to not break wallets that\n// have saved the url in their local storage, previously.\nexport var MAINNET_BACKUP_URL='https://solana-api.projectserum.com/';export function ConnectionProvider(_ref){var children=_ref.children;var _useLocalStorageState=useLocalStorageState('connectionEndpoint',MAINNET_URL),_useLocalStorageState2=_slicedToArray(_useLocalStorageState,2),endpoint=_useLocalStorageState2[0],setEndpoint=_useLocalStorageState2[1];var connection=useMemo(function(){return new Connection(endpoint,'recent');},[endpoint]);return/*#__PURE__*/_jsx(ConnectionContext.Provider,{value:{endpoint:endpoint,setEndpoint:setEndpoint,connection:connection},children:children});}export function useConnection(){var context=useContext(ConnectionContext);if(!context){throw new Error('Missing connection context');}return context.connection;}export function useConnectionConfig(){var context=useContext(ConnectionContext);if(!context){throw new Error('Missing connection context');}return{endpoint:context.endpoint,setEndpoint:context.setEndpoint};}export function useIsProdNetwork(){var context=useContext(ConnectionContext);if(!context){throw new Error('Missing connection context');}return context.endpoint===MAINNET_URL||context.endpoint===MAINNET_BACKUP_URL;}export function useSolanaExplorerUrlSuffix(){var context=useContext(ConnectionContext);if(!context){throw new Error('Missing connection context');}var endpoint=context.endpoint;if(endpoint===clusterApiUrl('devnet')){return'?cluster=devnet';}else if(endpoint===clusterApiUrl('testnet')){return'?cluster=testnet';}return'';}export function useAccountInfo(publicKey){var _publicKey$toBase;var connection=useConnection();var cacheKey=tuple(connection,publicKey===null||publicKey===void 0?void 0:publicKey.toBase58());var _useAsyncData=useAsyncData(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",publicKey?connection.getAccountInfo(publicKey):null);case 1:case\"end\":return _context.stop();}}},_callee);})),cacheKey),_useAsyncData2=_slicedToArray(_useAsyncData,2),accountInfo=_useAsyncData2[0],loaded=_useAsyncData2[1];useEffect(function(){if(!publicKey){return;}var previousInfo=null;var id=connection.onAccountChange(publicKey,function(info){if(!previousInfo||!previousInfo.data.equals(info.data)||previousInfo.lamports!==info.lamports){previousInfo=info;setCache(cacheKey,info);}});return function(){connection.removeAccountChangeListener(id);};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[connection,(_publicKey$toBase=publicKey===null||publicKey===void 0?void 0:publicKey.toBase58())!==null&&_publicKey$toBase!==void 0?_publicKey$toBase:'',cacheKey]);return[useRefEqual(accountInfo,function(oldInfo,newInfo){return!!oldInfo&&!!newInfo&&oldInfo.data.equals(newInfo.data)&&oldInfo.lamports===newInfo.lamports;}),loaded];}export function refreshAccountInfo(connection,publicKey){var clearCache=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var cacheKey=tuple(connection,publicKey.toBase58());refreshCache(cacheKey,clearCache);}export function setInitialAccountInfo(connection,publicKey,accountInfo){var cacheKey=tuple(connection,publicKey.toBase58());setCache(cacheKey,accountInfo,{initializeOnly:true});}export function getMultipleSolanaAccounts(_x,_x2){return _getMultipleSolanaAccounts.apply(this,arguments);}function _getMultipleSolanaAccounts(){_getMultipleSolanaAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,publicKeys){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",anchor.utils.rpc.getMultipleAccounts(connection,publicKeys));case 1:case\"end\":return _context2.stop();}}},_callee2);}));return _getMultipleSolanaAccounts.apply(this,arguments);}","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/src/utils/connection.tsx"],"names":["React","useContext","useEffect","useMemo","clusterApiUrl","Connection","tuple","anchor","useLocalStorageState","useRefEqual","refreshCache","setCache","useAsyncData","ConnectionContext","createContext","MAINNET_URL","MAINNET_BACKUP_URL","ConnectionProvider","children","endpoint","setEndpoint","connection","useConnection","context","Error","useConnectionConfig","useIsProdNetwork","useSolanaExplorerUrlSuffix","useAccountInfo","publicKey","cacheKey","toBase58","getAccountInfo","accountInfo","loaded","previousInfo","id","onAccountChange","info","data","equals","lamports","removeAccountChangeListener","oldInfo","newInfo","refreshAccountInfo","clearCache","setInitialAccountInfo","initializeOnly","getMultipleSolanaAccounts","publicKeys","utils","rpc","getMultipleAccounts"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport {\n  AccountInfo,\n  clusterApiUrl,\n  Connection,\n  PublicKey,\n} from '@solana/web3.js';\nimport tuple from 'immutable-tuple';\nimport * as anchor from '@project-serum/anchor';\nimport { useLocalStorageState, useRefEqual } from './utils';\nimport { refreshCache, setCache, useAsyncData } from './fetch-loop';\n\nconst ConnectionContext = React.createContext<{\n  endpoint: string;\n  setEndpoint: (string) => void;\n  connection: Connection;\n} | null>(null);\n\nexport const MAINNET_URL = 'https://solana-api.projectserum.com';\n// No backup url for now. Leave the variable to not break wallets that\n// have saved the url in their local storage, previously.\nexport const MAINNET_BACKUP_URL = 'https://solana-api.projectserum.com/';\nexport function ConnectionProvider({ children }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    'connectionEndpoint',\n    MAINNET_URL,\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [\n    endpoint,\n  ]);\n\n  return (\n    <ConnectionContext.Provider value={{ endpoint, setEndpoint, connection }}>\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection(): Connection {\n  let context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.connection;\n}\n\nexport function useConnectionConfig() {\n  let context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return { endpoint: context.endpoint, setEndpoint: context.setEndpoint };\n}\n\nexport function useIsProdNetwork() {\n  let context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.endpoint === MAINNET_URL || context.endpoint === MAINNET_BACKUP_URL;\n}\n\nexport function useSolanaExplorerUrlSuffix() {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  const endpoint = context.endpoint;\n  if (endpoint === clusterApiUrl('devnet')) {\n    return '?cluster=devnet';\n  } else if (endpoint === clusterApiUrl('testnet')) {\n    return '?cluster=testnet';\n  }\n  return '';\n}\n\nexport function useAccountInfo(publicKey?: PublicKey) {\n  const connection = useConnection();\n  const cacheKey = tuple(connection, publicKey?.toBase58());\n  const [accountInfo, loaded] = useAsyncData(\n    async () => (publicKey ? connection.getAccountInfo(publicKey) : null),\n    cacheKey,\n  );\n  useEffect(() => {\n    if (!publicKey) {\n      return;\n    }\n    let previousInfo: AccountInfo<Buffer> | null = null;\n    const id = connection.onAccountChange(publicKey, (info) => {\n      if (\n        !previousInfo ||\n        !previousInfo.data.equals(info.data) ||\n        previousInfo.lamports !== info.lamports\n      ) {\n        previousInfo = info;\n        setCache(cacheKey, info);\n      }\n    });\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connection, publicKey?.toBase58() ?? '', cacheKey]);\n  return [\n    useRefEqual(\n      accountInfo,\n      (oldInfo, newInfo) =>\n        !!oldInfo &&\n        !!newInfo &&\n        oldInfo.data.equals(newInfo.data) &&\n        oldInfo.lamports === newInfo.lamports,\n    ),\n    loaded,\n  ];\n}\n\nexport function refreshAccountInfo(connection, publicKey, clearCache = false) {\n  const cacheKey = tuple(connection, publicKey.toBase58());\n  refreshCache(cacheKey, clearCache);\n}\n\nexport function setInitialAccountInfo(connection, publicKey, accountInfo) {\n  const cacheKey = tuple(connection, publicKey.toBase58());\n  setCache(cacheKey, accountInfo, { initializeOnly: true });\n}\n\nexport async function getMultipleSolanaAccounts(\n  connection: Connection,\n  publicKeys: PublicKey[],\n): Promise<\n  Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\n> {\n\treturn anchor.utils.rpc.getMultipleAccounts(connection, publicKeys);\n}\n"]},"metadata":{},"sourceType":"module"}