{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import TransportWebHid from'@ledgerhq/hw-transport-webhid';import{getPublicKey,solana_derivation_path,solana_ledger_sign_bytes,solana_ledger_sign_transaction,solana_ledger_confirm_public_key}from'./ledger-core';import{DERIVATION_PATH}from'./localStorage';import bs58 from'bs58';var TRANSPORT=null;export var LedgerWalletProvider=/*#__PURE__*/function(){function LedgerWalletProvider(args){var _this=this;_classCallCheck(this,LedgerWalletProvider);this.init=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(TRANSPORT===null)){_context2.next=4;break;}_context2.next=3;return TransportWebHid.create();case 3:TRANSPORT=_context2.sent;case 4:_this.transport=TRANSPORT;_context2.next=7;return getPublicKey(_this.transport,_this.solanaDerivationPath);case 7:_this.pubKey=_context2.sent;_this.transport.on('disconnect',_this.onDisconnect);_this.listAddresses=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(walletCount){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",[_this.pubKey]);case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}();return _context2.abrupt(\"return\",_this);case 11:case\"end\":return _context2.stop();}}},_callee2);}));this.signTransaction=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(transaction){var sig_bytes;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return solana_ledger_sign_transaction(_this.transport,_this.solanaDerivationPath,transaction);case 2:sig_bytes=_context3.sent;transaction.addSignature(_this.publicKey,sig_bytes);return _context3.abrupt(\"return\",transaction);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref3.apply(this,arguments);};}();this.createSignature=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(message){var sig_bytes;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return solana_ledger_sign_bytes(_this.transport,_this.solanaDerivationPath,message);case 2:sig_bytes=_context4.sent;return _context4.abrupt(\"return\",bs58.encode(sig_bytes));case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x3){return _ref4.apply(this,arguments);};}();this.confirmPublicKey=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return solana_ledger_confirm_public_key(_this.transport,_this.solanaDerivationPath);case 2:return _context5.abrupt(\"return\",_context5.sent);case 3:case\"end\":return _context5.stop();}}},_callee5);}));this.onDisconnect=args&&args.onDisconnect||function(){};this.derivationPath=args?args.derivationPath:DERIVATION_PATH.bip44Change;this.account=args?args.account:undefined;this.change=args?args.change:undefined;this.solanaDerivationPath=solana_derivation_path(this.account,this.change,this.derivationPath);}_createClass(LedgerWalletProvider,[{key:\"publicKey\",get:function get(){return this.pubKey;}}]);return LedgerWalletProvider;}();","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/src/utils/walletProvider/ledger.js"],"names":["TransportWebHid","getPublicKey","solana_derivation_path","solana_ledger_sign_bytes","solana_ledger_sign_transaction","solana_ledger_confirm_public_key","DERIVATION_PATH","bs58","TRANSPORT","LedgerWalletProvider","args","init","create","transport","solanaDerivationPath","pubKey","on","onDisconnect","listAddresses","walletCount","signTransaction","transaction","sig_bytes","addSignature","publicKey","createSignature","message","encode","confirmPublicKey","derivationPath","bip44Change","account","undefined","change"],"mappings":"uoBAAA,MAAOA,CAAAA,eAAP,KAA4B,+BAA5B,CACA,OACEC,YADF,CAEEC,sBAFF,CAGEC,wBAHF,CAIEC,8BAJF,CAKEC,gCALF,KAMO,eANP,CAOA,OAASC,eAAT,KAAgC,gBAAhC,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CAEA,GAAIC,CAAAA,SAAS,CAAG,IAAhB,CAEA,UAAaC,CAAAA,oBAAb,yBACE,8BAAYC,IAAZ,CAAkB,gEAclBC,IAdkB,sEAcX,6IACDH,SAAS,GAAK,IADb,kDAEeR,CAAAA,eAAe,CAACY,MAAhB,EAFf,QAEHJ,SAFG,uBAIL,KAAI,CAACK,SAAL,CAAiBL,SAAjB,CAJK,uBAKeP,CAAAA,YAAY,CAAC,KAAI,CAACY,SAAN,CAAiB,KAAI,CAACC,oBAAtB,CAL3B,QAKL,KAAI,CAACC,MALA,gBAML,KAAI,CAACF,SAAL,CAAeG,EAAf,CAAkB,YAAlB,CAAgC,KAAI,CAACC,YAArC,EACA,KAAI,CAACC,aAAL,2FAAqB,iBAAOC,WAAP,kJAEZ,CAAC,KAAI,CAACJ,MAAN,CAFY,wDAArB,gEAPK,iCAWE,KAXF,2DAdW,QAgClBK,eAhCkB,2FAgCA,kBAAOC,WAAP,2JACQjB,CAAAA,8BAA8B,CACpD,KAAI,CAACS,SAD+C,CAEpD,KAAI,CAACC,oBAF+C,CAGpDO,WAHoD,CADtC,QACVC,SADU,gBAMhBD,WAAW,CAACE,YAAZ,CAAyB,KAAI,CAACC,SAA9B,CAAyCF,SAAzC,EANgB,iCAOTD,WAPS,0DAhCA,sEA0ClBI,eA1CkB,2FA0CA,kBAAOC,OAAP,2JACQvB,CAAAA,wBAAwB,CAC9C,KAAI,CAACU,SADyC,CAE9C,KAAI,CAACC,oBAFyC,CAG9CY,OAH8C,CADhC,QACVJ,SADU,iDAMTf,IAAI,CAACoB,MAAL,CAAYL,SAAZ,CANS,0DA1CA,sEAmDlBM,gBAnDkB,sEAmDC,+JACJvB,CAAAA,gCAAgC,CAC3C,KAAI,CAACQ,SADsC,CAE3C,KAAI,CAACC,oBAFsC,CAD5B,iHAnDD,GAChB,KAAKG,YAAL,CAAqBP,IAAI,EAAIA,IAAI,CAACO,YAAd,EAAgC,UAAM,CAAE,CAA5D,CACA,KAAKY,cAAL,CAAsBnB,IAAI,CACtBA,IAAI,CAACmB,cADiB,CAEtBvB,eAAe,CAACwB,WAFpB,CAGA,KAAKC,OAAL,CAAerB,IAAI,CAAGA,IAAI,CAACqB,OAAR,CAAkBC,SAArC,CACA,KAAKC,MAAL,CAAcvB,IAAI,CAAGA,IAAI,CAACuB,MAAR,CAAiBD,SAAnC,CACA,KAAKlB,oBAAL,CAA4BZ,sBAAsB,CAChD,KAAK6B,OAD2C,CAEhD,KAAKE,MAF2C,CAGhD,KAAKJ,cAH2C,CAAlD,CAKD,CAbH,sEA6BkB,CACd,MAAO,MAAKd,MAAZ,CACD,CA/BH","sourcesContent":["import TransportWebHid from '@ledgerhq/hw-transport-webhid';\nimport {\n  getPublicKey,\n  solana_derivation_path,\n  solana_ledger_sign_bytes,\n  solana_ledger_sign_transaction,\n  solana_ledger_confirm_public_key,\n} from './ledger-core';\nimport { DERIVATION_PATH } from './localStorage';\nimport bs58 from 'bs58';\n\nlet TRANSPORT = null;\n\nexport class LedgerWalletProvider {\n  constructor(args) {\n    this.onDisconnect = (args && args.onDisconnect) || (() => {});\n    this.derivationPath = args\n      ? args.derivationPath\n      : DERIVATION_PATH.bip44Change;\n    this.account = args ? args.account : undefined;\n    this.change = args ? args.change : undefined;\n    this.solanaDerivationPath = solana_derivation_path(\n      this.account,\n      this.change,\n      this.derivationPath,\n    );\n  }\n\n  init = async () => {\n    if (TRANSPORT === null) {\n      TRANSPORT = await TransportWebHid.create();\n    }\n    this.transport = TRANSPORT;\n    this.pubKey = await getPublicKey(this.transport, this.solanaDerivationPath);\n    this.transport.on('disconnect', this.onDisconnect);\n    this.listAddresses = async (walletCount) => {\n      // TODO: read accounts from ledger\n      return [this.pubKey];\n    };\n    return this;\n  };\n\n  get publicKey() {\n    return this.pubKey;\n  }\n\n  signTransaction = async (transaction) => {\n    const sig_bytes = await solana_ledger_sign_transaction(\n      this.transport,\n      this.solanaDerivationPath,\n      transaction,\n    );\n    transaction.addSignature(this.publicKey, sig_bytes);\n    return transaction;\n  };\n\n  createSignature = async (message) => {\n    const sig_bytes = await solana_ledger_sign_bytes(\n      this.transport,\n      this.solanaDerivationPath,\n      message,\n    );\n    return bs58.encode(sig_bytes);\n  };\n\n  confirmPublicKey = async () => {\n    return await solana_ledger_confirm_public_key(\n      this.transport,\n      this.solanaDerivationPath,\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}