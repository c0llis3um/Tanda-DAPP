{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport assert from \"assert\";\nimport { PublicKey } from \"@solana/web3.js\";\nexport function getMultipleAccounts(_x, _x2) {\n  return _getMultipleAccounts.apply(this, arguments);\n}\n\nfunction _getMultipleAccounts() {\n  _getMultipleAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, publicKeys) {\n    var args, res, accounts, _iterator, _step, account, value, executable, owner, lamports, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            args = [publicKeys.map(function (k) {\n              return k.toBase58();\n            }), {\n              commitment: \"recent\"\n            }]; // @ts-ignore\n\n            _context.next = 3;\n            return connection._rpcRequest(\"getMultipleAccounts\", args);\n\n          case 3:\n            res = _context.sent;\n\n            if (!res.error) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error(\"failed to get info about accounts \" + publicKeys.map(function (k) {\n              return k.toBase58();\n            }).join(\", \") + \": \" + res.error.message);\n\n          case 6:\n            assert(typeof res.result !== \"undefined\");\n            accounts = [];\n            _iterator = _createForOfIteratorHelper(res.result.value);\n            _context.prev = 9;\n\n            _iterator.s();\n\n          case 11:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 23;\n              break;\n            }\n\n            account = _step.value;\n            value = null;\n\n            if (!(account === null)) {\n              _context.next = 17;\n              break;\n            }\n\n            accounts.push(null);\n            return _context.abrupt(\"continue\", 21);\n\n          case 17:\n            if (res.result.value) {\n              executable = account.executable, owner = account.owner, lamports = account.lamports, data = account.data;\n              assert(data[1] === \"base64\");\n              value = {\n                executable: executable,\n                owner: new PublicKey(owner),\n                lamports: lamports,\n                data: Buffer.from(data[0], \"base64\")\n              };\n            }\n\n            if (!(value === null)) {\n              _context.next = 20;\n              break;\n            }\n\n            throw new Error(\"Invalid response\");\n\n          case 20:\n            accounts.push(value);\n\n          case 21:\n            _context.next = 11;\n            break;\n\n          case 23:\n            _context.next = 28;\n            break;\n\n          case 25:\n            _context.prev = 25;\n            _context.t0 = _context[\"catch\"](9);\n\n            _iterator.e(_context.t0);\n\n          case 28:\n            _context.prev = 28;\n\n            _iterator.f();\n\n            return _context.finish(28);\n\n          case 31:\n            return _context.abrupt(\"return\", accounts.map(function (account, idx) {\n              if (account === null) {\n                return null;\n              }\n\n              return {\n                publicKey: publicKeys[idx],\n                account: account\n              };\n            }));\n\n          case 32:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 25, 28, 31]]);\n  }));\n  return _getMultipleAccounts.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/utils/rpc.ts"],"names":[],"mappings":";;;AAAA,OAAO,MAAP,MAAmB,QAAnB;AACA,SAAS,SAAT,QAAmD,iBAAnD;AAEA,gBAAsB,mBAAtB;AAAA;AAAA;;;kFAAO,iBACL,UADK,EAEL,UAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,YAAA,IAND,GAMQ,CAAC,UAAU,CAAC,GAAX,CAAe,UAAC,CAAD;AAAA,qBAAO,CAAC,CAAC,QAAF,EAAP;AAAA,aAAf,CAAD,EAAsC;AAAE,cAAA,UAAU,EAAE;AAAd,aAAtC,CANR,EAOL;;AAPK;AAAA,mBAQa,UAAU,CAAC,WAAX,CAAuB,qBAAvB,EAA8C,IAA9C,CARb;;AAAA;AAQC,YAAA,GARD;;AAAA,iBASD,GAAG,CAAC,KATH;AAAA;AAAA;AAAA;;AAAA,kBAUG,IAAI,KAAJ,CACJ,uCACE,UAAU,CAAC,GAAX,CAAe,UAAC,CAAD;AAAA,qBAAO,CAAC,CAAC,QAAF,EAAP;AAAA,aAAf,EAAoC,IAApC,CAAyC,IAAzC,CADF,GAEE,IAFF,GAGE,GAAG,CAAC,KAAJ,CAAU,OAJR,CAVH;;AAAA;AAiBL,YAAA,MAAM,CAAC,OAAO,GAAG,CAAC,MAAX,KAAsB,WAAvB,CAAN;AACM,YAAA,QAlBD,GAuBA,EAvBA;AAAA,mDAwBiB,GAAG,CAAC,MAAJ,CAAW,KAxB5B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBM,YAAA,OAxBN;AAyBC,YAAA,KAzBD,GA8BQ,IA9BR;;AAAA,kBA+BC,OAAO,KAAK,IA/Bb;AAAA;AAAA;AAAA;;AAgCD,YAAA,QAAQ,CAAC,IAAT,CAAc,IAAd;AAhCC;;AAAA;AAmCH,gBAAI,GAAG,CAAC,MAAJ,CAAW,KAAf,EAAsB;AACZ,cAAA,UADY,GAC0B,OAD1B,CACZ,UADY,EACA,KADA,GAC0B,OAD1B,CACA,KADA,EACO,QADP,GAC0B,OAD1B,CACO,QADP,EACiB,IADjB,GAC0B,OAD1B,CACiB,IADjB;AAEpB,cAAA,MAAM,CAAC,IAAI,CAAC,CAAD,CAAJ,KAAY,QAAb,CAAN;AACA,cAAA,KAAK,GAAG;AACN,gBAAA,UAAU,EAAV,UADM;AAEN,gBAAA,KAAK,EAAE,IAAI,SAAJ,CAAc,KAAd,CAFD;AAGN,gBAAA,QAAQ,EAAR,QAHM;AAIN,gBAAA,IAAI,EAAE,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,CAAD,CAAhB,EAAqB,QAArB;AAJA,eAAR;AAMD;;AA5CE,kBA6CC,KAAK,KAAK,IA7CX;AAAA;AAAA;AAAA;;AAAA,kBA8CK,IAAI,KAAJ,CAAU,kBAAV,CA9CL;;AAAA;AAgDH,YAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;;AAhDG;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,6CAkDE,QAAQ,CAAC,GAAT,CAAa,UAAC,OAAD,EAAU,GAAV,EAAiB;AACnC,kBAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,uBAAO,IAAP;AACD;;AACD,qBAAO;AACL,gBAAA,SAAS,EAAE,UAAU,CAAC,GAAD,CADhB;AAEL,gBAAA,OAAO,EAAP;AAFK,eAAP;AAID,aARM,CAlDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourceRoot":"","sourcesContent":["import assert from \"assert\";\nimport { PublicKey } from \"@solana/web3.js\";\nexport async function getMultipleAccounts(connection, publicKeys) {\n    const args = [publicKeys.map((k) => k.toBase58()), { commitment: \"recent\" }];\n    // @ts-ignore\n    const res = await connection._rpcRequest(\"getMultipleAccounts\", args);\n    if (res.error) {\n        throw new Error(\"failed to get info about accounts \" +\n            publicKeys.map((k) => k.toBase58()).join(\", \") +\n            \": \" +\n            res.error.message);\n    }\n    assert(typeof res.result !== \"undefined\");\n    const accounts = [];\n    for (const account of res.result.value) {\n        let value = null;\n        if (account === null) {\n            accounts.push(null);\n            continue;\n        }\n        if (res.result.value) {\n            const { executable, owner, lamports, data } = account;\n            assert(data[1] === \"base64\");\n            value = {\n                executable,\n                owner: new PublicKey(owner),\n                lamports,\n                data: Buffer.from(data[0], \"base64\"),\n            };\n        }\n        if (value === null) {\n            throw new Error(\"Invalid response\");\n        }\n        accounts.push(value);\n    }\n    return accounts.map((account, idx) => {\n        if (account === null) {\n            return null;\n        }\n        return {\n            publicKey: publicKeys[idx],\n            account,\n        };\n    });\n}\n//# sourceMappingURL=rpc.js.map"]},"metadata":{},"sourceType":"module"}