{"ast":null,"code":"import _slicedToArray from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{PublicKey,SystemProgram,Transaction,TransactionInstruction,SYSVAR_RENT_PUBKEY}from'@solana/web3.js';import{TokenInstructions}from'@project-serum/serum';import{assertOwner,closeAccount,initializeAccount,initializeMint,memoInstruction,mintTo,TOKEN_PROGRAM_ID,transferChecked}from'./instructions';import{ACCOUNT_LAYOUT,getOwnedAccountsFilters,MINT_LAYOUT}from'./data';export function getOwnedTokenAccounts(_x,_x2){return _getOwnedTokenAccounts.apply(this,arguments);}function _getOwnedTokenAccounts(){_getOwnedTokenAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,publicKey){var filters,resp;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:filters=getOwnedAccountsFilters(publicKey);_context.next=3;return connection.getProgramAccounts(TOKEN_PROGRAM_ID,{filters:filters});case 3:resp=_context.sent;return _context.abrupt(\"return\",resp.map(function(_ref9){var pubkey=_ref9.pubkey,_ref9$account=_ref9.account,data=_ref9$account.data,executable=_ref9$account.executable,owner=_ref9$account.owner,lamports=_ref9$account.lamports;return{publicKey:new PublicKey(pubkey),accountInfo:{data:data,executable:executable,owner:new PublicKey(owner),lamports:lamports}};}));case 5:case\"end\":return _context.stop();}}},_callee);}));return _getOwnedTokenAccounts.apply(this,arguments);}export function signAndSendTransaction(_x3,_x4,_x5,_x6){return _signAndSendTransaction.apply(this,arguments);}function _signAndSendTransaction(){_signAndSendTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,transaction,wallet,signers){var _transaction;var skipPreflight,_transaction2,rawTransaction,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:skipPreflight=_args2.length>4&&_args2[4]!==undefined?_args2[4]:false;_context2.next=3;return connection.getRecentBlockhash('max');case 3:transaction.recentBlockhash=_context2.sent.blockhash;(_transaction=transaction).setSigners.apply(_transaction,[// fee payed by the wallet owner\nwallet.publicKey].concat(_toConsumableArray(signers.map(function(s){return s.publicKey;}))));if(signers.length>0){(_transaction2=transaction).partialSign.apply(_transaction2,_toConsumableArray(signers));}_context2.next=8;return wallet.signTransaction(transaction);case 8:transaction=_context2.sent;rawTransaction=transaction.serialize();_context2.next=12;return connection.sendRawTransaction(rawTransaction,{skipPreflight:skipPreflight,preflightCommitment:'single'});case 12:return _context2.abrupt(\"return\",_context2.sent);case 13:case\"end\":return _context2.stop();}}},_callee2);}));return _signAndSendTransaction.apply(this,arguments);}export function nativeTransfer(_x7,_x8,_x9,_x10){return _nativeTransfer.apply(this,arguments);}function _nativeTransfer(){_nativeTransfer=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection,wallet,destination,amount){var tx;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:tx=new Transaction().add(SystemProgram.transfer({fromPubkey:wallet.publicKey,toPubkey:destination,lamports:amount}));_context3.next=3;return signAndSendTransaction(connection,tx,wallet,[]);case 3:return _context3.abrupt(\"return\",_context3.sent);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return _nativeTransfer.apply(this,arguments);}export function createAndInitializeMint(_x11){return _createAndInitializeMint.apply(this,arguments);}function _createAndInitializeMint(){_createAndInitializeMint=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref){var connection,owner,mint,amount,decimals,initialAccount,transaction,signers;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:connection=_ref.connection,owner=_ref.owner,mint=_ref.mint,amount=_ref.amount,decimals=_ref.decimals,initialAccount=_ref.initialAccount;transaction=new Transaction();_context4.t0=transaction;_context4.t1=SystemProgram;_context4.t2=owner.publicKey;_context4.t3=mint.publicKey;_context4.next=8;return connection.getMinimumBalanceForRentExemption(MINT_LAYOUT.span);case 8:_context4.t4=_context4.sent;_context4.t5=MINT_LAYOUT.span;_context4.t6=TOKEN_PROGRAM_ID;_context4.t7={fromPubkey:_context4.t2,newAccountPubkey:_context4.t3,lamports:_context4.t4,space:_context4.t5,programId:_context4.t6};_context4.t8=_context4.t1.createAccount.call(_context4.t1,_context4.t7);_context4.t0.add.call(_context4.t0,_context4.t8);transaction.add(initializeMint({mint:mint.publicKey,decimals:decimals,mintAuthority:owner.publicKey}));signers=[mint];if(!(amount>0)){_context4.next=32;break;}_context4.t9=transaction;_context4.t10=SystemProgram;_context4.t11=owner.publicKey;_context4.t12=initialAccount.publicKey;_context4.next=23;return connection.getMinimumBalanceForRentExemption(ACCOUNT_LAYOUT.span);case 23:_context4.t13=_context4.sent;_context4.t14=ACCOUNT_LAYOUT.span;_context4.t15=TOKEN_PROGRAM_ID;_context4.t16={fromPubkey:_context4.t11,newAccountPubkey:_context4.t12,lamports:_context4.t13,space:_context4.t14,programId:_context4.t15};_context4.t17=_context4.t10.createAccount.call(_context4.t10,_context4.t16);_context4.t9.add.call(_context4.t9,_context4.t17);signers.push(initialAccount);transaction.add(initializeAccount({account:initialAccount.publicKey,mint:mint.publicKey,owner:owner.publicKey}));transaction.add(mintTo({mint:mint.publicKey,destination:initialAccount.publicKey,amount:amount,mintAuthority:owner.publicKey}));case 32:_context4.next=34;return signAndSendTransaction(connection,transaction,owner,signers);case 34:return _context4.abrupt(\"return\",_context4.sent);case 35:case\"end\":return _context4.stop();}}},_callee4);}));return _createAndInitializeMint.apply(this,arguments);}export function createAndInitializeTokenAccount(_x12){return _createAndInitializeTokenAccount.apply(this,arguments);}function _createAndInitializeTokenAccount(){_createAndInitializeTokenAccount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2){var connection,payer,mintPublicKey,newAccount,transaction,signers;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:connection=_ref2.connection,payer=_ref2.payer,mintPublicKey=_ref2.mintPublicKey,newAccount=_ref2.newAccount;transaction=new Transaction();_context5.t0=transaction;_context5.t1=SystemProgram;_context5.t2=payer.publicKey;_context5.t3=newAccount.publicKey;_context5.next=8;return connection.getMinimumBalanceForRentExemption(ACCOUNT_LAYOUT.span);case 8:_context5.t4=_context5.sent;_context5.t5=ACCOUNT_LAYOUT.span;_context5.t6=TOKEN_PROGRAM_ID;_context5.t7={fromPubkey:_context5.t2,newAccountPubkey:_context5.t3,lamports:_context5.t4,space:_context5.t5,programId:_context5.t6};_context5.t8=_context5.t1.createAccount.call(_context5.t1,_context5.t7);_context5.t0.add.call(_context5.t0,_context5.t8);transaction.add(initializeAccount({account:newAccount.publicKey,mint:mintPublicKey,owner:payer.publicKey}));signers=[newAccount];_context5.next=18;return signAndSendTransaction(connection,transaction,payer,signers);case 18:return _context5.abrupt(\"return\",_context5.sent);case 19:case\"end\":return _context5.stop();}}},_callee5);}));return _createAndInitializeTokenAccount.apply(this,arguments);}export function createAssociatedTokenAccount(_x13){return _createAssociatedTokenAccount.apply(this,arguments);}function _createAssociatedTokenAccount(){_createAssociatedTokenAccount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref3){var connection,wallet,splTokenMintAddress,_yield$createAssociat,_yield$createAssociat2,ix,address,tx,txSig;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:connection=_ref3.connection,wallet=_ref3.wallet,splTokenMintAddress=_ref3.splTokenMintAddress;_context6.next=3;return createAssociatedTokenAccountIx(wallet.publicKey,wallet.publicKey,splTokenMintAddress);case 3:_yield$createAssociat=_context6.sent;_yield$createAssociat2=_slicedToArray(_yield$createAssociat,2);ix=_yield$createAssociat2[0];address=_yield$createAssociat2[1];tx=new Transaction();tx.add(ix);tx.feePayer=wallet.publicKey;_context6.next=12;return signAndSendTransaction(connection,tx,wallet,[]);case 12:txSig=_context6.sent;return _context6.abrupt(\"return\",[address,txSig]);case 14:case\"end\":return _context6.stop();}}},_callee6);}));return _createAssociatedTokenAccount.apply(this,arguments);}function createAssociatedTokenAccountIx(_x14,_x15,_x16){return _createAssociatedTokenAccountIx.apply(this,arguments);}function _createAssociatedTokenAccountIx(){_createAssociatedTokenAccountIx=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(fundingAddress,walletAddress,splTokenMintAddress){var associatedTokenAddress,systemProgramId,keys,ix;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return findAssociatedTokenAddress(walletAddress,splTokenMintAddress);case 2:associatedTokenAddress=_context7.sent;systemProgramId=new PublicKey('11111111111111111111111111111111');keys=[{pubkey:fundingAddress,isSigner:true,isWritable:true},{pubkey:associatedTokenAddress,isSigner:false,isWritable:true},{pubkey:walletAddress,isSigner:false,isWritable:false},{pubkey:splTokenMintAddress,isSigner:false,isWritable:false},{pubkey:systemProgramId,isSigner:false,isWritable:false},{pubkey:TokenInstructions.TOKEN_PROGRAM_ID,isSigner:false,isWritable:false},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:false,isWritable:false}];ix=new TransactionInstruction({keys:keys,programId:ASSOCIATED_TOKEN_PROGRAM_ID,data:Buffer.from([])});return _context7.abrupt(\"return\",[ix,associatedTokenAddress]);case 7:case\"end\":return _context7.stop();}}},_callee7);}));return _createAssociatedTokenAccountIx.apply(this,arguments);}export function findAssociatedTokenAddress(_x17,_x18){return _findAssociatedTokenAddress.apply(this,arguments);}function _findAssociatedTokenAddress(){_findAssociatedTokenAddress=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(walletAddress,tokenMintAddress){return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return PublicKey.findProgramAddress([walletAddress.toBuffer(),TokenInstructions.TOKEN_PROGRAM_ID.toBuffer(),tokenMintAddress.toBuffer()],ASSOCIATED_TOKEN_PROGRAM_ID);case 2:return _context8.abrupt(\"return\",_context8.sent[0]);case 3:case\"end\":return _context8.stop();}}},_callee8);}));return _findAssociatedTokenAddress.apply(this,arguments);}export var ASSOCIATED_TOKEN_PROGRAM_ID=new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');export function transferTokens(_x19){return _transferTokens.apply(this,arguments);}function _transferTokens(){_transferTokens=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref4){var connection,owner,sourcePublicKey,destinationPublicKey,amount,memo,mint,decimals,overrideDestinationCheck,destinationAccountInfo,destinationAssociatedTokenAddress;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:connection=_ref4.connection,owner=_ref4.owner,sourcePublicKey=_ref4.sourcePublicKey,destinationPublicKey=_ref4.destinationPublicKey,amount=_ref4.amount,memo=_ref4.memo,mint=_ref4.mint,decimals=_ref4.decimals,overrideDestinationCheck=_ref4.overrideDestinationCheck;_context9.next=3;return connection.getAccountInfo(destinationPublicKey);case 3:destinationAccountInfo=_context9.sent;if(!(!!destinationAccountInfo&&destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID))){_context9.next=8;break;}_context9.next=7;return transferBetweenSplTokenAccounts({connection:connection,owner:owner,mint:mint,decimals:decimals,sourcePublicKey:sourcePublicKey,destinationPublicKey:destinationPublicKey,amount:amount,memo:memo});case 7:return _context9.abrupt(\"return\",_context9.sent);case 8:if(!((!destinationAccountInfo||destinationAccountInfo.lamports===0)&&!overrideDestinationCheck)){_context9.next=10;break;}throw new Error('Cannot send to address with zero SOL balances');case 10:_context9.next=12;return findAssociatedTokenAddress(destinationPublicKey,mint);case 12:destinationAssociatedTokenAddress=_context9.sent;_context9.next=15;return connection.getAccountInfo(destinationAssociatedTokenAddress);case 15:destinationAccountInfo=_context9.sent;if(!(!!destinationAccountInfo&&destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID))){_context9.next=20;break;}_context9.next=19;return transferBetweenSplTokenAccounts({connection:connection,owner:owner,mint:mint,decimals:decimals,sourcePublicKey:sourcePublicKey,destinationPublicKey:destinationAssociatedTokenAddress,amount:amount,memo:memo});case 19:return _context9.abrupt(\"return\",_context9.sent);case 20:_context9.next=22;return createAndTransferToAccount({connection:connection,owner:owner,sourcePublicKey:sourcePublicKey,destinationPublicKey:destinationPublicKey,amount:amount,memo:memo,mint:mint,decimals:decimals});case 22:return _context9.abrupt(\"return\",_context9.sent);case 23:case\"end\":return _context9.stop();}}},_callee9);}));return _transferTokens.apply(this,arguments);}function createTransferBetweenSplTokenAccountsInstruction(_ref5){var ownerPublicKey=_ref5.ownerPublicKey,mint=_ref5.mint,decimals=_ref5.decimals,sourcePublicKey=_ref5.sourcePublicKey,destinationPublicKey=_ref5.destinationPublicKey,amount=_ref5.amount,memo=_ref5.memo;var transaction=new Transaction().add(transferChecked({source:sourcePublicKey,mint:mint,decimals:decimals,destination:destinationPublicKey,owner:ownerPublicKey,amount:amount}));if(memo){transaction.add(memoInstruction(memo));}return transaction;}function transferBetweenSplTokenAccounts(_x20){return _transferBetweenSplTokenAccounts.apply(this,arguments);}function _transferBetweenSplTokenAccounts(){_transferBetweenSplTokenAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref6){var connection,owner,mint,decimals,sourcePublicKey,destinationPublicKey,amount,memo,transaction,signers;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:connection=_ref6.connection,owner=_ref6.owner,mint=_ref6.mint,decimals=_ref6.decimals,sourcePublicKey=_ref6.sourcePublicKey,destinationPublicKey=_ref6.destinationPublicKey,amount=_ref6.amount,memo=_ref6.memo;transaction=createTransferBetweenSplTokenAccountsInstruction({ownerPublicKey:owner.publicKey,mint:mint,decimals:decimals,sourcePublicKey:sourcePublicKey,destinationPublicKey:destinationPublicKey,amount:amount,memo:memo});signers=[];_context10.next=5;return signAndSendTransaction(connection,transaction,owner,signers);case 5:return _context10.abrupt(\"return\",_context10.sent);case 6:case\"end\":return _context10.stop();}}},_callee10);}));return _transferBetweenSplTokenAccounts.apply(this,arguments);}function createAndTransferToAccount(_x21){return _createAndTransferToAccount.apply(this,arguments);}function _createAndTransferToAccount(){_createAndTransferToAccount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(_ref7){var connection,owner,sourcePublicKey,destinationPublicKey,amount,memo,mint,decimals,_yield$createAssociat3,_yield$createAssociat4,createAccountInstruction,newAddress,transaction,transferBetweenAccountsTxn,signers;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:connection=_ref7.connection,owner=_ref7.owner,sourcePublicKey=_ref7.sourcePublicKey,destinationPublicKey=_ref7.destinationPublicKey,amount=_ref7.amount,memo=_ref7.memo,mint=_ref7.mint,decimals=_ref7.decimals;_context11.next=3;return createAssociatedTokenAccountIx(owner.publicKey,destinationPublicKey,mint);case 3:_yield$createAssociat3=_context11.sent;_yield$createAssociat4=_slicedToArray(_yield$createAssociat3,2);createAccountInstruction=_yield$createAssociat4[0];newAddress=_yield$createAssociat4[1];transaction=new Transaction();transaction.add(assertOwner({account:destinationPublicKey,owner:SystemProgram.programId}));transaction.add(createAccountInstruction);transferBetweenAccountsTxn=createTransferBetweenSplTokenAccountsInstruction({ownerPublicKey:owner.publicKey,mint:mint,decimals:decimals,sourcePublicKey:sourcePublicKey,destinationPublicKey:newAddress,amount:amount,memo:memo});transaction.add(transferBetweenAccountsTxn);signers=[];_context11.next=15;return signAndSendTransaction(connection,transaction,owner,signers);case 15:return _context11.abrupt(\"return\",_context11.sent);case 16:case\"end\":return _context11.stop();}}},_callee11);}));return _createAndTransferToAccount.apply(this,arguments);}export function closeTokenAccount(_x22){return _closeTokenAccount.apply(this,arguments);}function _closeTokenAccount(){_closeTokenAccount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(_ref8){var connection,owner,sourcePublicKey,skipPreflight,transaction,signers;return _regeneratorRuntime.wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:connection=_ref8.connection,owner=_ref8.owner,sourcePublicKey=_ref8.sourcePublicKey,skipPreflight=_ref8.skipPreflight;transaction=new Transaction().add(closeAccount({source:sourcePublicKey,destination:owner.publicKey,owner:owner.publicKey}));signers=[];_context12.next=5;return signAndSendTransaction(connection,transaction,owner,signers,skipPreflight);case 5:return _context12.abrupt(\"return\",_context12.sent);case 6:case\"end\":return _context12.stop();}}},_callee12);}));return _closeTokenAccount.apply(this,arguments);}","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/src/utils/tokens/index.js"],"names":["PublicKey","SystemProgram","Transaction","TransactionInstruction","SYSVAR_RENT_PUBKEY","TokenInstructions","assertOwner","closeAccount","initializeAccount","initializeMint","memoInstruction","mintTo","TOKEN_PROGRAM_ID","transferChecked","ACCOUNT_LAYOUT","getOwnedAccountsFilters","MINT_LAYOUT","getOwnedTokenAccounts","connection","publicKey","filters","getProgramAccounts","resp","map","pubkey","account","data","executable","owner","lamports","accountInfo","signAndSendTransaction","transaction","wallet","signers","skipPreflight","getRecentBlockhash","recentBlockhash","blockhash","setSigners","s","length","partialSign","signTransaction","rawTransaction","serialize","sendRawTransaction","preflightCommitment","nativeTransfer","destination","amount","tx","add","transfer","fromPubkey","toPubkey","createAndInitializeMint","mint","decimals","initialAccount","getMinimumBalanceForRentExemption","span","newAccountPubkey","space","programId","createAccount","mintAuthority","push","createAndInitializeTokenAccount","payer","mintPublicKey","newAccount","createAssociatedTokenAccount","splTokenMintAddress","createAssociatedTokenAccountIx","ix","address","feePayer","txSig","fundingAddress","walletAddress","findAssociatedTokenAddress","associatedTokenAddress","systemProgramId","keys","isSigner","isWritable","ASSOCIATED_TOKEN_PROGRAM_ID","Buffer","from","tokenMintAddress","findProgramAddress","toBuffer","transferTokens","sourcePublicKey","destinationPublicKey","memo","overrideDestinationCheck","getAccountInfo","destinationAccountInfo","equals","transferBetweenSplTokenAccounts","Error","destinationAssociatedTokenAddress","createAndTransferToAccount","createTransferBetweenSplTokenAccountsInstruction","ownerPublicKey","source","createAccountInstruction","newAddress","transferBetweenAccountsTxn","closeTokenAccount"],"mappings":"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","sourcesContent":["import {\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport {\n  assertOwner,\n  closeAccount,\n  initializeAccount,\n  initializeMint,\n  memoInstruction,\n  mintTo,\n  TOKEN_PROGRAM_ID,\n  transferChecked,\n} from './instructions';\nimport { ACCOUNT_LAYOUT, getOwnedAccountsFilters, MINT_LAYOUT } from './data';\n\nexport async function getOwnedTokenAccounts(connection, publicKey) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  let resp = await connection.getProgramAccounts(\n    TOKEN_PROGRAM_ID,\n    {\n      filters,\n    },\n  );\n  return resp\n    .map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n}\n\nexport async function signAndSendTransaction(\n  connection,\n  transaction,\n  wallet,\n  signers,\n  skipPreflight = false,\n) {\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash;\n  transaction.setSigners(\n    // fee payed by the wallet owner\n    wallet.publicKey,\n    ...signers.map((s) => s.publicKey),\n  );\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  transaction = await wallet.signTransaction(transaction);\n  const rawTransaction = transaction.serialize();\n  return await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight,\n    preflightCommitment: 'single',\n  });\n}\n\nexport async function nativeTransfer(connection, wallet, destination, amount) {\n  const tx = new Transaction().add(\n    SystemProgram.transfer({\n      fromPubkey: wallet.publicKey,\n      toPubkey: destination,\n      lamports: amount,\n    }),\n  );\n  return await signAndSendTransaction(connection, tx, wallet, []);\n}\n\nexport async function createAndInitializeMint({\n  connection,\n  owner, // Wallet for paying fees and allowed to mint new tokens\n  mint, // Account to hold token information\n  amount, // Number of tokens to issue\n  decimals,\n  initialAccount, // Account to hold newly issued tokens, if amount > 0\n}) {\n  let transaction = new Transaction();\n  transaction.add(\n    SystemProgram.createAccount({\n      fromPubkey: owner.publicKey,\n      newAccountPubkey: mint.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        MINT_LAYOUT.span,\n      ),\n      space: MINT_LAYOUT.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n  transaction.add(\n    initializeMint({\n      mint: mint.publicKey,\n      decimals,\n      mintAuthority: owner.publicKey,\n    }),\n  );\n  let signers = [mint];\n  if (amount > 0) {\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: owner.publicKey,\n        newAccountPubkey: initialAccount.publicKey,\n        lamports: await connection.getMinimumBalanceForRentExemption(\n          ACCOUNT_LAYOUT.span,\n        ),\n        space: ACCOUNT_LAYOUT.span,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n    );\n    signers.push(initialAccount);\n    transaction.add(\n      initializeAccount({\n        account: initialAccount.publicKey,\n        mint: mint.publicKey,\n        owner: owner.publicKey,\n      }),\n    );\n    transaction.add(\n      mintTo({\n        mint: mint.publicKey,\n        destination: initialAccount.publicKey,\n        amount,\n        mintAuthority: owner.publicKey,\n      }),\n    );\n  }\n\n  return await signAndSendTransaction(connection, transaction, owner, signers);\n}\n\nexport async function createAndInitializeTokenAccount({\n  connection,\n  payer,\n  mintPublicKey,\n  newAccount,\n}) {\n  let transaction = new Transaction();\n  transaction.add(\n    SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: newAccount.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        ACCOUNT_LAYOUT.span,\n      ),\n      space: ACCOUNT_LAYOUT.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n  transaction.add(\n    initializeAccount({\n      account: newAccount.publicKey,\n      mint: mintPublicKey,\n      owner: payer.publicKey,\n    }),\n  );\n\n  let signers = [newAccount];\n  return await signAndSendTransaction(connection, transaction, payer, signers);\n}\n\nexport async function createAssociatedTokenAccount({\n  connection,\n  wallet,\n  splTokenMintAddress,\n}) {\n  const [ix, address] = await createAssociatedTokenAccountIx(\n    wallet.publicKey,\n    wallet.publicKey,\n    splTokenMintAddress,\n  );\n  const tx = new Transaction();\n  tx.add(ix);\n  tx.feePayer = wallet.publicKey;\n  const txSig = await signAndSendTransaction(connection, tx, wallet, []);\n\n  return [address, txSig];\n}\nasync function createAssociatedTokenAccountIx(\n  fundingAddress,\n  walletAddress,\n  splTokenMintAddress,\n) {\n  const associatedTokenAddress = await findAssociatedTokenAddress(\n    walletAddress,\n    splTokenMintAddress,\n  );\n  const systemProgramId = new PublicKey('11111111111111111111111111111111');\n  const keys = [\n    {\n      pubkey: fundingAddress,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: systemProgramId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TokenInstructions.TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  const ix = new TransactionInstruction({\n    keys,\n    programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n  return [ix, associatedTokenAddress];\n}\n\nexport async function findAssociatedTokenAddress(\n  walletAddress,\n  tokenMintAddress,\n) {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TokenInstructions.TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n    )\n  )[0];\n}\n\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nexport async function transferTokens({\n  connection,\n  owner,\n  sourcePublicKey,\n  destinationPublicKey,\n  amount,\n  memo,\n  mint,\n  decimals,\n  overrideDestinationCheck,\n}) {\n  let destinationAccountInfo = await connection.getAccountInfo(\n    destinationPublicKey,\n  );\n  if (\n    !!destinationAccountInfo &&\n    destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)\n  ) {\n    return await transferBetweenSplTokenAccounts({\n      connection,\n      owner,\n      mint,\n      decimals,\n      sourcePublicKey,\n      destinationPublicKey,\n      amount,\n      memo,\n    });\n  }\n\n  if (\n    (!destinationAccountInfo || destinationAccountInfo.lamports === 0) &&\n    !overrideDestinationCheck\n  ) {\n    throw new Error('Cannot send to address with zero SOL balances');\n  }\n\n  const destinationAssociatedTokenAddress = await findAssociatedTokenAddress(\n    destinationPublicKey,\n    mint,\n  );\n  destinationAccountInfo = await connection.getAccountInfo(\n    destinationAssociatedTokenAddress,\n  );\n  if (\n    !!destinationAccountInfo &&\n    destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)\n  ) {\n    return await transferBetweenSplTokenAccounts({\n      connection,\n      owner,\n      mint,\n      decimals,\n      sourcePublicKey,\n      destinationPublicKey: destinationAssociatedTokenAddress,\n      amount,\n      memo,\n    });\n  }\n  return await createAndTransferToAccount({\n    connection,\n    owner,\n    sourcePublicKey,\n    destinationPublicKey,\n    amount,\n    memo,\n    mint,\n    decimals,\n  });\n}\n\nfunction createTransferBetweenSplTokenAccountsInstruction({\n  ownerPublicKey,\n  mint,\n  decimals,\n  sourcePublicKey,\n  destinationPublicKey,\n  amount,\n  memo,\n}) {\n  let transaction = new Transaction().add(\n    transferChecked({\n      source: sourcePublicKey,\n      mint,\n      decimals,\n      destination: destinationPublicKey,\n      owner: ownerPublicKey,\n      amount,\n    }),\n  );\n  if (memo) {\n    transaction.add(memoInstruction(memo));\n  }\n  return transaction;\n}\n\nasync function transferBetweenSplTokenAccounts({\n  connection,\n  owner,\n  mint,\n  decimals,\n  sourcePublicKey,\n  destinationPublicKey,\n  amount,\n  memo,\n}) {\n  const transaction = createTransferBetweenSplTokenAccountsInstruction({\n    ownerPublicKey: owner.publicKey,\n    mint,\n    decimals,\n    sourcePublicKey,\n    destinationPublicKey,\n    amount,\n    memo,\n  });\n  let signers = [];\n  return await signAndSendTransaction(connection, transaction, owner, signers);\n}\n\nasync function createAndTransferToAccount({\n  connection,\n  owner,\n  sourcePublicKey,\n  destinationPublicKey,\n  amount,\n  memo,\n  mint,\n  decimals,\n}) {\n  const [\n    createAccountInstruction,\n    newAddress,\n  ] = await createAssociatedTokenAccountIx(\n    owner.publicKey,\n    destinationPublicKey,\n    mint,\n  );\n  let transaction = new Transaction();\n  transaction.add(\n    assertOwner({\n      account: destinationPublicKey,\n      owner: SystemProgram.programId,\n    }),\n  );\n  transaction.add(createAccountInstruction);\n  const transferBetweenAccountsTxn = createTransferBetweenSplTokenAccountsInstruction(\n    {\n      ownerPublicKey: owner.publicKey,\n      mint,\n      decimals,\n      sourcePublicKey,\n      destinationPublicKey: newAddress,\n      amount,\n      memo,\n    },\n  );\n  transaction.add(transferBetweenAccountsTxn);\n  let signers = [];\n  return await signAndSendTransaction(connection, transaction, owner, signers);\n}\n\nexport async function closeTokenAccount({\n  connection,\n  owner,\n  sourcePublicKey,\n  skipPreflight,\n}) {\n  let transaction = new Transaction().add(\n    closeAccount({\n      source: sourcePublicKey,\n      destination: owner.publicKey,\n      owner: owner.publicKey,\n    }),\n  );\n  let signers = [];\n  return await signAndSendTransaction(\n    connection,\n    transaction,\n    owner,\n    signers,\n    skipPreflight,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}