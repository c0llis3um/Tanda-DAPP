{"ast":null,"code":"import { translateError } from \"../common\";\nimport { splitArgsAndCtx } from \"../context\";\nexport default class RpcFactory {\n  static build(idlIx, txFn, idlErrors, provider) {\n    const rpc = async (...args) => {\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n\n      try {\n        const txSig = await provider.send(tx, ctx.signers, ctx.options);\n        return txSig;\n      } catch (err) {\n        console.log(\"Translating error\", err);\n        let translatedErr = translateError(idlErrors, err);\n\n        if (translatedErr === null) {\n          throw err;\n        }\n\n        throw translatedErr;\n      }\n    };\n\n    return rpc;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/program/namespace/rpc.ts"],"names":[],"mappings":"AAGA,SAAS,cAAT,QAA+B,WAA/B;AACA,SAAS,eAAT,QAAgC,YAAhC;AAGA,eAAc,MAAO,UAAP,CAAiB;AACtB,SAAO,KAAP,CACL,KADK,EAEL,IAFK,EAGL,SAHK,EAIL,QAJK,EAIa;AAElB,UAAM,GAAG,GAAG,OAAO,GAAG,IAAV,KAAwD;AAClE,YAAM,EAAE,GAAG,IAAI,CAAC,GAAG,IAAJ,CAAf;AACA,YAAM,GAAG,GAAH,IAAU,eAAe,CAAC,KAAD,EAAQ,CAAC,GAAG,IAAJ,CAAR,CAA/B;;AACA,UAAI;AACF,cAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,IAAT,CAAc,EAAd,EAAkB,GAAG,CAAC,OAAtB,EAA+B,GAAG,CAAC,OAAnC,CAApB;AACA,eAAO,KAAP;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ,QAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,GAAjC;AACA,YAAI,aAAa,GAAG,cAAc,CAAC,SAAD,EAAY,GAAZ,CAAlC;;AACA,YAAI,aAAa,KAAK,IAAtB,EAA4B;AAC1B,gBAAM,GAAN;AACD;;AACD,cAAM,aAAN;AACD;AACF,KAdD;;AAgBA,WAAO,GAAP;AACD;;AAxB4B","sourceRoot":"","sourcesContent":["import { translateError } from \"../common\";\nimport { splitArgsAndCtx } from \"../context\";\nexport default class RpcFactory {\n    static build(idlIx, txFn, idlErrors, provider) {\n        const rpc = async (...args) => {\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            try {\n                const txSig = await provider.send(tx, ctx.signers, ctx.options);\n                return txSig;\n            }\n            catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = translateError(idlErrors, err);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n        };\n        return rpc;\n    }\n}\n//# sourceMappingURL=rpc.js.map"]},"metadata":{},"sourceType":"module"}