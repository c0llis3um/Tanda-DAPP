{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{refreshWalletPublicKeys,useBalanceInfo,useWallet}from'../utils/wallet';import{useUpdateTokenName}from'../utils/tokens/names';import{useCallAsync,useSendTransaction}from'../utils/notifications';import{Account,LAMPORTS_PER_SOL}from'@solana/web3.js';import{abbreviateAddress,sleep}from'../utils/utils';import{refreshAccountInfo,useConnectionConfig,MAINNET_URL}from'../utils/connection';import{createAndInitializeMint}from'../utils/tokens';import{Tooltip,Button}from'@material-ui/core';import React from'react';export default function DebugButtons(){var wallet=useWallet();var updateTokenName=useUpdateTokenName();var _useConnectionConfig=useConnectionConfig(),endpoint=_useConnectionConfig.endpoint;var balanceInfo=useBalanceInfo(wallet.publicKey);var _useSendTransaction=useSendTransaction(),_useSendTransaction2=_slicedToArray(_useSendTransaction,2),sendTransaction=_useSendTransaction2[0],sending=_useSendTransaction2[1];var callAsync=useCallAsync();var _ref=balanceInfo||{},amount=_ref.amount;function requestAirdrop(){callAsync(wallet.connection.requestAirdrop(wallet.publicKey,LAMPORTS_PER_SOL),{onSuccess:function(){var _onSuccess=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return sleep(5000);case 2:refreshAccountInfo(wallet.connection,wallet.publicKey);case 3:case\"end\":return _context.stop();}}},_callee);}));function onSuccess(){return _onSuccess.apply(this,arguments);}return onSuccess;}(),successMessage:'Success! Please wait up to 30 seconds for the SOL tokens to appear in your wallet.'});}function mintTestToken(){var mint=new Account();updateTokenName(mint.publicKey,\"Test Token \".concat(abbreviateAddress(mint.publicKey)),\"TEST\".concat(mint.publicKey.toBase58().slice(0,2)));sendTransaction(createAndInitializeMint({connection:wallet.connection,owner:wallet,mint:mint,amount:1000,decimals:2,initialAccount:new Account()}),{onSuccess:function onSuccess(){return refreshWalletPublicKeys(wallet);}});}var noSol=amount===0;var requestAirdropDisabled=endpoint===MAINNET_URL;var spacing=24;return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',marginLeft:spacing},children:[/*#__PURE__*/_jsx(Tooltip,{title:requestAirdropDisabled?'Receive some devnet SOL for free. Only enabled on the devnet':'Receive some devnet SOL for free',children:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:requestAirdrop,disabled:requestAirdropDisabled,children:\"Request Airdrop\"})})}),/*#__PURE__*/_jsx(Tooltip,{title:noSol?'Generate and receive balances in a new test token. Requires SOL balance':'Generate and receive balances in a new test token',children:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:mintTestToken,disabled:sending||noSol,style:{marginLeft:spacing},children:\"Mint Test Token\"})})})]});}","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/src/components/DebugButtons.js"],"names":["refreshWalletPublicKeys","useBalanceInfo","useWallet","useUpdateTokenName","useCallAsync","useSendTransaction","Account","LAMPORTS_PER_SOL","abbreviateAddress","sleep","refreshAccountInfo","useConnectionConfig","MAINNET_URL","createAndInitializeMint","Tooltip","Button","React","DebugButtons","wallet","updateTokenName","endpoint","balanceInfo","publicKey","sendTransaction","sending","callAsync","amount","requestAirdrop","connection","onSuccess","successMessage","mintTestToken","mint","toBase58","slice","owner","decimals","initialAccount","noSol","requestAirdropDisabled","spacing","display","marginLeft"],"mappings":"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","sourcesContent":["import {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet,\n} from '../utils/wallet';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { Account, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { abbreviateAddress, sleep } from '../utils/utils';\nimport {\n  refreshAccountInfo,\n  useConnectionConfig,\n  MAINNET_URL,\n} from '../utils/connection';\nimport { createAndInitializeMint } from '../utils/tokens';\nimport { Tooltip, Button } from '@material-ui/core';\nimport React from 'react';\n\nexport default function DebugButtons() {\n  const wallet = useWallet();\n  const updateTokenName = useUpdateTokenName();\n  const { endpoint } = useConnectionConfig();\n  const balanceInfo = useBalanceInfo(wallet.publicKey);\n  const [sendTransaction, sending] = useSendTransaction();\n  const callAsync = useCallAsync();\n\n  let { amount } = balanceInfo || {};\n\n  function requestAirdrop() {\n    callAsync(\n      wallet.connection.requestAirdrop(wallet.publicKey, LAMPORTS_PER_SOL),\n      {\n        onSuccess: async () => {\n          await sleep(5000);\n          refreshAccountInfo(wallet.connection, wallet.publicKey);\n        },\n        successMessage:\n          'Success! Please wait up to 30 seconds for the SOL tokens to appear in your wallet.',\n      },\n    );\n  }\n\n  function mintTestToken() {\n    let mint = new Account();\n    updateTokenName(\n      mint.publicKey,\n      `Test Token ${abbreviateAddress(mint.publicKey)}`,\n      `TEST${mint.publicKey.toBase58().slice(0, 2)}`,\n    );\n    sendTransaction(\n      createAndInitializeMint({\n        connection: wallet.connection,\n        owner: wallet,\n        mint,\n        amount: 1000,\n        decimals: 2,\n        initialAccount: new Account(),\n      }),\n      { onSuccess: () => refreshWalletPublicKeys(wallet) },\n    );\n  }\n\n  const noSol = amount === 0;\n  const requestAirdropDisabled = endpoint === MAINNET_URL;\n  const spacing = 24;\n  return (\n    <div style={{ display: 'flex', marginLeft: spacing }}>\n      <Tooltip\n        title={\n          requestAirdropDisabled\n            ? 'Receive some devnet SOL for free. Only enabled on the devnet'\n            : 'Receive some devnet SOL for free'\n        }\n      >\n        <span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={requestAirdrop}\n            disabled={requestAirdropDisabled}\n          >\n            Request Airdrop\n          </Button>\n        </span>\n      </Tooltip>\n      <Tooltip\n        title={\n          noSol\n            ? 'Generate and receive balances in a new test token. Requires SOL balance'\n            : 'Generate and receive balances in a new test token'\n        }\n      >\n        <span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={mintTestToken}\n            disabled={sending || noSol}\n            style={{ marginLeft: spacing }}\n          >\n            Mint Test Token\n          </Button>\n        </span>\n      </Tooltip>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}