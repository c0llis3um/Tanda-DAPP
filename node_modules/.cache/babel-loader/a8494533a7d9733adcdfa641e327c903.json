{"ast":null,"code":"import _classCallCheck from \"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { IdlCoder } from \"./idl\";\n/**\n * Encodes and decodes user defined types.\n */\n\nexport var TypesCoder = /*#__PURE__*/function () {\n  function TypesCoder(idl) {\n    _classCallCheck(this, TypesCoder);\n\n    if (idl.types === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n\n    var layouts = idl.types.map(function (acc) {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    }); // @ts-ignore\n\n    this.layouts = new Map(layouts);\n  }\n\n  _createClass(TypesCoder, [{\n    key: \"encode\",\n    value: function encode(accountName, account) {\n      var buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n      var layout = this.layouts.get(accountName);\n      var len = layout.encode(account, buffer);\n      return buffer.slice(0, len);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(accountName, ix) {\n      var layout = this.layouts.get(accountName);\n      return layout.decode(ix);\n    }\n  }]);\n\n  return TypesCoder;\n}();","map":{"version":3,"sources":["../../../src/coder/types.ts"],"names":[],"mappings":";;AAEA,SAAS,QAAT,QAAyB,OAAzB;AAEA;;AAEG;;AACH,WAAa,UAAb;AAME,sBAAmB,GAAnB,EAA2B;AAAA;;AACzB,QAAI,GAAG,CAAC,KAAJ,KAAc,SAAlB,EAA6B;AAC3B,WAAK,OAAL,GAAe,IAAI,GAAJ,EAAf;AACA;AACD;;AACD,QAAM,OAAO,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAc,UAAC,GAAD,EAAQ;AACpC,aAAO,CAAC,GAAG,CAAC,IAAL,EAAW,QAAQ,CAAC,aAAT,CAAuB,GAAvB,EAA4B,GAAG,CAAC,KAAhC,CAAX,CAAP;AACD,KAFe,CAAhB,CALyB,CASzB;;AACA,SAAK,OAAL,GAAe,IAAI,GAAJ,CAAQ,OAAR,CAAf;AACD;;AAjBH;AAAA;AAAA,2BAmByB,WAnBzB,EAmB8C,OAnB9C,EAmBwD;AACpD,UAAM,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAf,CADoD,CACjB;;AACnC,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAf;AACA,UAAM,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,MAAvB,CAAZ;AACA,aAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAP;AACD;AAxBH;AAAA;AAAA,2BA0ByB,WA1BzB,EA0B8C,EA1B9C,EA0BwD;AACpD,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAf;AACA,aAAO,MAAM,CAAC,MAAP,CAAc,EAAd,CAAP;AACD;AA7BH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["import { IdlCoder } from \"./idl\";\n/**\n * Encodes and decodes user defined types.\n */\nexport class TypesCoder {\n    constructor(idl) {\n        if (idl.types === undefined) {\n            this.layouts = new Map();\n            return;\n        }\n        const layouts = idl.types.map((acc) => {\n            return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n        });\n        // @ts-ignore\n        this.layouts = new Map(layouts);\n    }\n    encode(accountName, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.layouts.get(accountName);\n        const len = layout.encode(account, buffer);\n        return buffer.slice(0, len);\n    }\n    decode(accountName, ix) {\n        const layout = this.layouts.get(accountName);\n        return layout.decode(ix);\n    }\n}\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"module"}