{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{DialogContentText}from\"@material-ui/core\";import{useEffect,useState}from\"react\";import{useConnection}from\"../utils/connection\";import{priceStore,serumMarkets}from\"../utils/markets\";function FeeContentText(_ref){var ethFee=_ref.ethFee,ethPrice=_ref.ethPrice,_ref$warning=_ref.warning,warning=_ref$warning===void 0?false:_ref$warning,_ref$prefix=_ref.prefix,prefix=_ref$prefix===void 0?\"\":_ref$prefix,_ref$bold=_ref.bold,bold=_ref$bold===void 0?false:_ref$bold;var usdFeeEstimate=ethPrice!==undefined?ethPrice*ethFee:null;return/*#__PURE__*/_jsxs(DialogContentText,{color:warning?'secondary':'textPrimary'// @ts-ignore\n,style:{marginBottom:'0px',fontWeight:bold?'500':undefined},children:[prefix,ethFee.toFixed(4),' ETH',usdFeeEstimate&&\" (\".concat(usdFeeEstimate.toFixed(2),\" USD)\")]});}export function EthFeeEstimate(_ref2){var ethFeeData=_ref2.ethFeeData,insufficientEthBalance=_ref2.insufficientEthBalance;var _ethFeeData=_slicedToArray(ethFeeData,3),ethFeeEstimate=_ethFeeData[0],loaded=_ethFeeData[1],error=_ethFeeData[2];var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),ethPrice=_useState2[0],setEthPrice=_useState2[1];var connection=useConnection();useEffect(function(){if(ethPrice===undefined){var m=serumMarkets['ETH'];priceStore.getPrice(connection,m.name).then(setEthPrice);}},[ethPrice,connection]);if(!loaded&&!error){return/*#__PURE__*/_jsx(DialogContentText,{color:\"textPrimary\",children:\"Loading...\"});}else if(error){return/*#__PURE__*/_jsx(DialogContentText,{color:\"textPrimary\",children:\"Unable to estimate\"});}if(Array.isArray(ethFeeEstimate)){var _ethFeeEstimate=_slicedToArray(ethFeeEstimate,2),approveFee=_ethFeeEstimate[0],swapFee=_ethFeeEstimate[1];return/*#__PURE__*/_jsxs(DialogContentText,{children:[/*#__PURE__*/_jsx(FeeContentText,{ethFee:approveFee,ethPrice:ethPrice,prefix:\"Approve: \"}),/*#__PURE__*/_jsx(FeeContentText,{ethFee:swapFee,ethPrice:ethPrice,prefix:\"Swap: \"}),/*#__PURE__*/_jsx(FeeContentText,{warning:insufficientEthBalance,ethFee:approveFee+swapFee,ethPrice:ethPrice,prefix:\"Total: \",bold:true})]});}return/*#__PURE__*/_jsx(FeeContentText,{warning:insufficientEthBalance,ethFee:ethFeeEstimate,ethPrice:ethPrice});}","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/src/components/EthFeeEstimate.tsx"],"names":["DialogContentText","useEffect","useState","useConnection","priceStore","serumMarkets","FeeContentText","ethFee","ethPrice","warning","prefix","bold","usdFeeEstimate","undefined","marginBottom","fontWeight","toFixed","EthFeeEstimate","ethFeeData","insufficientEthBalance","ethFeeEstimate","loaded","error","setEthPrice","connection","m","getPrice","name","then","Array","isArray","approveFee","swapFee"],"mappings":"2PAAA,OAASA,iBAAT,KAAkC,mBAAlC,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,aAAT,KAA8B,qBAA9B,CACA,OAASC,UAAT,CAAqBC,YAArB,KAAyC,kBAAzC,CAEA,QAASC,CAAAA,cAAT,MAA0F,IAAhEC,CAAAA,MAAgE,MAAhEA,MAAgE,CAAxDC,QAAwD,MAAxDA,QAAwD,mBAA9CC,OAA8C,CAA9CA,OAA8C,uBAApC,KAAoC,+BAA7BC,MAA6B,CAA7BA,MAA6B,sBAApB,EAAoB,4BAAhBC,IAAgB,CAAhBA,IAAgB,oBAAT,KAAS,WACxF,GAAIC,CAAAA,cAAc,CAAGJ,QAAQ,GAAKK,SAAb,CAAyBL,QAAQ,CAAGD,MAApC,CAA6C,IAAlE,CAEA,mBACE,MAAC,iBAAD,EACE,KAAK,CAAEE,OAAO,CAAG,WAAH,CAAiB,aAC/B;AAFF,CAGE,KAAK,CAAE,CAAEK,YAAY,CAAE,KAAhB,CAAuBC,UAAU,CAAEJ,IAAI,CAAG,KAAH,CAAWE,SAAlD,CAHT,WAKGH,MALH,CAMGH,MAAM,CAACS,OAAP,CAAe,CAAf,CANH,CAOG,MAPH,CAQGJ,cAAc,cAASA,cAAc,CAACI,OAAf,CAAuB,CAAvB,CAAT,SARjB,GADF,CAYD,CAED,MAAO,SAASC,CAAAA,cAAT,OAAgE,IAAtCC,CAAAA,UAAsC,OAAtCA,UAAsC,CAA1BC,sBAA0B,OAA1BA,sBAA0B,gCAC/BD,UAD+B,IAChEE,cADgE,gBAChDC,MADgD,gBACxCC,KADwC,8BAErCpB,QAAQ,CAAqBW,SAArB,CAF6B,wCAE9DL,QAF8D,eAEpDe,WAFoD,eAGrE,GAAMC,CAAAA,UAAU,CAAGrB,aAAa,EAAhC,CACAF,SAAS,CAAC,UAAM,CACd,GAAIO,QAAQ,GAAKK,SAAjB,CAA4B,CAC1B,GAAIY,CAAAA,CAAC,CAAGpB,YAAY,CAAC,KAAD,CAApB,CACAD,UAAU,CAACsB,QAAX,CAAoBF,UAApB,CAAgCC,CAAC,CAACE,IAAlC,EAAwCC,IAAxC,CAA6CL,WAA7C,EACD,CACF,CALQ,CAKN,CAACf,QAAD,CAAWgB,UAAX,CALM,CAAT,CAOA,GAAI,CAACH,MAAD,EAAW,CAACC,KAAhB,CAAuB,CACrB,mBACE,KAAC,iBAAD,EAAmB,KAAK,CAAC,aAAzB,wBADF,CAGD,CAJD,IAIO,IAAIA,KAAJ,CAAW,CAChB,mBACE,KAAC,iBAAD,EAAmB,KAAK,CAAC,aAAzB,gCADF,CAKD,CAED,GAAIO,KAAK,CAACC,OAAN,CAAcV,cAAd,CAAJ,CAAmC,oCACHA,cADG,IAC1BW,UAD0B,oBACdC,OADc,oBAEjC,mBACE,MAAC,iBAAD,yBACE,KAAC,cAAD,EAAgB,MAAM,CAAED,UAAxB,CAAoC,QAAQ,CAAEvB,QAA9C,CAAwD,MAAM,CAAE,WAAhE,EADF,cAEE,KAAC,cAAD,EAAgB,MAAM,CAAEwB,OAAxB,CAAiC,QAAQ,CAAExB,QAA3C,CAAqD,MAAM,CAAE,QAA7D,EAFF,cAGE,KAAC,cAAD,EACE,OAAO,CAAEW,sBADX,CAEE,MAAM,CAAEY,UAAU,CAAGC,OAFvB,CAGE,QAAQ,CAAExB,QAHZ,CAIE,MAAM,CAAE,SAJV,CAKE,IAAI,KALN,EAHF,GADF,CAaD,CAED,mBACE,KAAC,cAAD,EACE,OAAO,CAAEW,sBADX,CAEE,MAAM,CAAEC,cAFV,CAGE,QAAQ,CAAEZ,QAHZ,EADF,CAOD","sourcesContent":["import { DialogContentText } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useConnection } from \"../utils/connection\";\nimport { priceStore, serumMarkets } from \"../utils/markets\";\n\nfunction FeeContentText({ ethFee, ethPrice, warning = false, prefix = \"\", bold = false }) {\n  let usdFeeEstimate = ethPrice !== undefined ? ethPrice * ethFee : null;\n\n  return (\n    <DialogContentText\n      color={warning ? 'secondary' : 'textPrimary'}\n      // @ts-ignore\n      style={{ marginBottom: '0px', fontWeight: bold ? '500' : undefined }}\n    >\n      {prefix}\n      {ethFee.toFixed(4)}\n      {' ETH'}\n      {usdFeeEstimate && ` (${usdFeeEstimate.toFixed(2)} USD)`}\n    </DialogContentText>\n  );\n}\n\nexport function EthFeeEstimate({ ethFeeData, insufficientEthBalance }) {\n  let [ethFeeEstimate, loaded, error] = ethFeeData;\n  const [ethPrice, setEthPrice] = useState<number | undefined>(undefined);\n  const connection = useConnection();\n  useEffect(() => {\n    if (ethPrice === undefined) {\n      let m = serumMarkets['ETH'];\n      priceStore.getPrice(connection, m.name).then(setEthPrice);\n    }\n  }, [ethPrice, connection]);\n\n  if (!loaded && !error) {\n    return (\n      <DialogContentText color=\"textPrimary\">Loading...</DialogContentText>\n    );\n  } else if (error) {\n    return (\n      <DialogContentText color=\"textPrimary\">\n        Unable to estimate\n      </DialogContentText>\n    );\n  }\n\n  if (Array.isArray(ethFeeEstimate)) {\n    const [approveFee, swapFee] = ethFeeEstimate;\n    return (\n      <DialogContentText>\n        <FeeContentText ethFee={approveFee} ethPrice={ethPrice} prefix={\"Approve: \"} />\n        <FeeContentText ethFee={swapFee} ethPrice={ethPrice} prefix={\"Swap: \"} />\n        <FeeContentText\n          warning={insufficientEthBalance}\n          ethFee={approveFee + swapFee}\n          ethPrice={ethPrice}\n          prefix={\"Total: \"}\n          bold\n        />\n      </DialogContentText>\n    );\n  }\n\n  return (\n    <FeeContentText\n      warning={insufficientEthBalance}\n      ethFee={ethFeeEstimate}\n      ethPrice={ethPrice}\n    />\n  );\n}"]},"metadata":{},"sourceType":"module"}