{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import{getUnlockedMnemonicAndSeed}from'./../wallet-seed';import*as bip32 from'bip32';import nacl from'tweetnacl';import{Account}from'@solana/web3.js';import bs58 from'bs58';import{derivePath}from'ed25519-hd-key';export var DERIVATION_PATH={deprecated:undefined,bip44:'bip44',bip44Change:'bip44Change',bip44Root:'bip44Root'// Ledger only.\n};export function getAccountFromSeed(seed,walletIndex){var dPath=arguments.length>2&&arguments[2]!==undefined?arguments[2]:undefined;var accountIndex=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var derivedSeed=deriveSeed(seed,walletIndex,dPath,accountIndex);return new Account(nacl.sign.keyPair.fromSeed(derivedSeed).secretKey);}function deriveSeed(seed,walletIndex,derivationPath,accountIndex){switch(derivationPath){case DERIVATION_PATH.deprecated:var path=\"m/501'/\".concat(walletIndex,\"'/0/\").concat(accountIndex);return bip32.fromSeed(seed).derivePath(path).privateKey;case DERIVATION_PATH.bip44:var path44=\"m/44'/501'/\".concat(walletIndex,\"'\");return derivePath(path44,seed).key;case DERIVATION_PATH.bip44Change:var path44Change=\"m/44'/501'/\".concat(walletIndex,\"'/0'\");return derivePath(path44Change,seed).key;default:throw new Error(\"invalid derivation path: \".concat(derivationPath));}}export var LocalStorageWalletProvider=function LocalStorageWalletProvider(args){var _this=this;_classCallCheck(this,LocalStorageWalletProvider);this.init=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _yield$getUnlockedMne,seed;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getUnlockedMnemonicAndSeed();case 2:_yield$getUnlockedMne=_context2.sent;seed=_yield$getUnlockedMne.seed;_this.listAddresses=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(walletCount){var seedBuffer;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:seedBuffer=Buffer.from(seed,'hex');return _context.abrupt(\"return\",_toConsumableArray(Array(walletCount).keys()).map(function(walletIndex){var address=getAccountFromSeed(seedBuffer,walletIndex).publicKey;var name=localStorage.getItem(\"name\".concat(walletIndex));return{index:walletIndex,address:address,name:name};}));case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}();return _context2.abrupt(\"return\",_this);case 6:case\"end\":return _context2.stop();}}},_callee2);}));this.signTransaction=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(transaction){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:transaction.partialSign(_this.account);return _context3.abrupt(\"return\",transaction);case 2:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref3.apply(this,arguments);};}();this.createSignature=function(message){return bs58.encode(nacl.sign.detached(message,_this.account.secretKey));};this.account=args.account;this.publicKey=this.account.publicKey;};","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/src/utils/walletProvider/localStorage.js"],"names":["getUnlockedMnemonicAndSeed","bip32","nacl","Account","bs58","derivePath","DERIVATION_PATH","deprecated","undefined","bip44","bip44Change","bip44Root","getAccountFromSeed","seed","walletIndex","dPath","accountIndex","derivedSeed","deriveSeed","sign","keyPair","fromSeed","secretKey","derivationPath","path","privateKey","path44","key","path44Change","Error","LocalStorageWalletProvider","args","init","listAddresses","walletCount","seedBuffer","Buffer","from","Array","keys","map","address","publicKey","name","localStorage","getItem","index","signTransaction","transaction","partialSign","account","createSignature","message","encode","detached"],"mappings":"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","sourcesContent":["import { getUnlockedMnemonicAndSeed } from './../wallet-seed';\nimport * as bip32 from 'bip32';\nimport nacl from 'tweetnacl';\nimport { Account } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { derivePath } from 'ed25519-hd-key';\n\nexport const DERIVATION_PATH = {\n  deprecated: undefined,\n  bip44: 'bip44',\n  bip44Change: 'bip44Change',\n  bip44Root: 'bip44Root', // Ledger only.\n};\n\nexport function getAccountFromSeed(\n  seed,\n  walletIndex,\n  dPath = undefined,\n  accountIndex = 0,\n) {\n  const derivedSeed = deriveSeed(seed, walletIndex, dPath, accountIndex);\n  return new Account(nacl.sign.keyPair.fromSeed(derivedSeed).secretKey);\n}\n\nfunction deriveSeed(seed, walletIndex, derivationPath, accountIndex) {\n  switch (derivationPath) {\n    case DERIVATION_PATH.deprecated:\n      const path = `m/501'/${walletIndex}'/0/${accountIndex}`;\n      return bip32.fromSeed(seed).derivePath(path).privateKey;\n    case DERIVATION_PATH.bip44:\n      const path44 = `m/44'/501'/${walletIndex}'`;\n      return derivePath(path44, seed).key;\n    case DERIVATION_PATH.bip44Change:\n      const path44Change = `m/44'/501'/${walletIndex}'/0'`;\n      return derivePath(path44Change, seed).key;\n    default:\n      throw new Error(`invalid derivation path: ${derivationPath}`);\n  }\n}\n\nexport class LocalStorageWalletProvider {\n  constructor(args) {\n    this.account = args.account;\n    this.publicKey = this.account.publicKey;\n  }\n\n  init = async () => {\n    const { seed } = await getUnlockedMnemonicAndSeed();\n    this.listAddresses = async (walletCount) => {\n      const seedBuffer = Buffer.from(seed, 'hex');\n      return [...Array(walletCount).keys()].map((walletIndex) => {\n        let address = getAccountFromSeed(seedBuffer, walletIndex).publicKey;\n        let name = localStorage.getItem(`name${walletIndex}`);\n        return { index: walletIndex, address, name };\n      });\n    };\n    return this;\n  };\n\n  signTransaction = async (transaction) => {\n    transaction.partialSign(this.account);\n    return transaction;\n  };\n\n  createSignature = (message) => {\n    return bs58.encode(nacl.sign.detached(message, this.account.secretKey));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}