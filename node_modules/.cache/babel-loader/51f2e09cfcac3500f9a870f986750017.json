{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.derivePath = exports.isValidPath = exports.getPublicKey = exports.getMasterKeyFromSeed = void 0;\n\nvar createHmac = require(\"create-hmac\");\n\nvar nacl = require(\"tweetnacl\");\n\nvar utils_1 = require(\"./utils\");\n\nvar ED25519_CURVE = 'ed25519 seed';\nvar HARDENED_OFFSET = 0x80000000;\n\nexports.getMasterKeyFromSeed = function (seed) {\n  var hmac = createHmac('sha512', ED25519_CURVE);\n  var I = hmac.update(Buffer.from(seed, 'hex')).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\n\nvar CKDPriv = function CKDPriv(_ref, index) {\n  var key = _ref.key,\n      chainCode = _ref.chainCode;\n  var indexBuffer = Buffer.allocUnsafe(4);\n  indexBuffer.writeUInt32BE(index, 0);\n  var data = Buffer.concat([Buffer.alloc(1, 0), key, indexBuffer]);\n  var I = createHmac('sha512', chainCode).update(data).digest();\n  var IL = I.slice(0, 32);\n  var IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\n\nexports.getPublicKey = function (privateKey) {\n  var withZeroByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n  var signPk = keyPair.secretKey.subarray(32);\n  var zero = Buffer.alloc(1, 0);\n  return withZeroByte ? Buffer.concat([zero, Buffer.from(signPk)]) : Buffer.from(signPk);\n};\n\nexports.isValidPath = function (path) {\n  if (!utils_1.pathRegex.test(path)) {\n    return false;\n  }\n\n  return !path.split('/').slice(1).map(utils_1.replaceDerive).some(isNaN);\n};\n\nexports.derivePath = function (path, seed) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HARDENED_OFFSET;\n\n  if (!exports.isValidPath(path)) {\n    throw new Error('Invalid derivation path');\n  }\n\n  var _exports$getMasterKey = exports.getMasterKeyFromSeed(seed),\n      key = _exports$getMasterKey.key,\n      chainCode = _exports$getMasterKey.chainCode;\n\n  var segments = path.split('/').slice(1).map(utils_1.replaceDerive).map(function (el) {\n    return parseInt(el, 10);\n  });\n  return segments.reduce(function (parentKeys, segment) {\n    return CKDPriv(parentKeys, segment + offset);\n  }, {\n    key: key,\n    chainCode: chainCode\n  });\n};","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/ed25519-hd-key/dist/index.js"],"names":["Object","defineProperty","exports","value","derivePath","isValidPath","getPublicKey","getMasterKeyFromSeed","createHmac","require","nacl","utils_1","ED25519_CURVE","HARDENED_OFFSET","seed","hmac","I","update","Buffer","from","digest","IL","slice","IR","key","chainCode","CKDPriv","index","indexBuffer","allocUnsafe","writeUInt32BE","data","concat","alloc","privateKey","withZeroByte","keyPair","sign","fromSeed","signPk","secretKey","subarray","zero","path","pathRegex","test","split","map","replaceDerive","some","isNaN","offset","Error","segments","el","parseInt","reduce","parentKeys","segment"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.derivePath = exports.isValidPath = exports.getPublicKey = exports.getMasterKeyFromSeed = void 0;\nconst createHmac = require(\"create-hmac\");\nconst nacl = require(\"tweetnacl\");\nconst utils_1 = require(\"./utils\");\nconst ED25519_CURVE = 'ed25519 seed';\nconst HARDENED_OFFSET = 0x80000000;\nexports.getMasterKeyFromSeed = (seed) => {\n    const hmac = createHmac('sha512', ED25519_CURVE);\n    const I = hmac.update(Buffer.from(seed, 'hex')).digest();\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR,\n    };\n};\nconst CKDPriv = ({ key, chainCode }, index) => {\n    const indexBuffer = Buffer.allocUnsafe(4);\n    indexBuffer.writeUInt32BE(index, 0);\n    const data = Buffer.concat([Buffer.alloc(1, 0), key, indexBuffer]);\n    const I = createHmac('sha512', chainCode)\n        .update(data)\n        .digest();\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR,\n    };\n};\nexports.getPublicKey = (privateKey, withZeroByte = true) => {\n    const keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n    const signPk = keyPair.secretKey.subarray(32);\n    const zero = Buffer.alloc(1, 0);\n    return withZeroByte ?\n        Buffer.concat([zero, Buffer.from(signPk)]) :\n        Buffer.from(signPk);\n};\nexports.isValidPath = (path) => {\n    if (!utils_1.pathRegex.test(path)) {\n        return false;\n    }\n    return !path\n        .split('/')\n        .slice(1)\n        .map(utils_1.replaceDerive)\n        .some(isNaN);\n};\nexports.derivePath = (path, seed, offset = HARDENED_OFFSET) => {\n    if (!exports.isValidPath(path)) {\n        throw new Error('Invalid derivation path');\n    }\n    const { key, chainCode } = exports.getMasterKeyFromSeed(seed);\n    const segments = path\n        .split('/')\n        .slice(1)\n        .map(utils_1.replaceDerive)\n        .map(el => parseInt(el, 10));\n    return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), { key, chainCode });\n};\n"]},"metadata":{},"sourceType":"script"}