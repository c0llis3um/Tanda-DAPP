{"ast":null,"code":"import _objectSpread from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import DialogTitle from'@material-ui/core/DialogTitle';import DialogContent from'@material-ui/core/DialogContent';import DialogForm from'./DialogForm';import{abbreviateAddress}from'../utils/utils';import CopyableDisplay from'./CopyableDisplay';import{useSolanaExplorerUrlSuffix}from'../utils/connection';import Typography from'@material-ui/core/Typography';import DialogActions from'@material-ui/core/DialogActions';import Button from'@material-ui/core/Button';import{useAsyncData}from'../utils/fetch-loop';import tuple from'immutable-tuple';import{useCallAsync}from'../utils/notifications';import{ConnectToMetamaskButton,getErc20Balance,swapErc20ToSpl,useEthAccount,estimateErc20SwapFees}from'../utils/swap/eth';import InputAdornment from'@material-ui/core/InputAdornment';import TextField from'@material-ui/core/TextField';import Stepper from'@material-ui/core/Stepper';import Step from'@material-ui/core/Step';import StepLabel from'@material-ui/core/StepLabel';import CircularProgress from'@material-ui/core/CircularProgress';import Link from'@material-ui/core/Link';import Tabs from'@material-ui/core/Tabs';import Tab from'@material-ui/core/Tab';import{DialogContentText,Tooltip}from'@material-ui/core';import{EthFeeEstimate}from'./EthFeeEstimate';var DISABLED_MINTS=new Set(['ABE7D8RU1eHfCJWzHYZZeymeE8k9nPPXfqge2NQYyKoL']);export default function DepositDialog(_ref){var open=_ref.open,onClose=_ref.onClose,publicKey=_ref.publicKey,balanceInfo=_ref.balanceInfo,swapInfo=_ref.swapInfo,isAssociatedToken=_ref.isAssociatedToken;var ethAccount=useEthAccount();var urlSuffix=useSolanaExplorerUrlSuffix();var mint=balanceInfo.mint,tokenName=balanceInfo.tokenName,tokenSymbol=balanceInfo.tokenSymbol,owner=balanceInfo.owner;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),tab=_useState2[0],setTab=_useState2[1];// SwapInfos to ignore.\nif(swapInfo&&swapInfo.coin&&swapInfo.coin.erc20Contract==='0x2b2e04bf86978b45bb2edf54aca876973bdd43c0'){swapInfo=null;}var tabs=null;if(swapInfo){var firstTab=\"SPL \".concat(tokenSymbol!==null&&tokenSymbol!==void 0?tokenSymbol:swapInfo.coin.ticker);var secondTab=swapInfo.coin.ticker;if(!mint){firstTab='SOL';}else{secondTab=\"\".concat(swapInfo.coin.erc20Contract?'ERC20':'Native',\" \").concat(secondTab);}tabs=/*#__PURE__*/_jsxs(Tabs,{value:tab,variant:\"fullWidth\",onChange:function onChange(e,value){return setTab(value);},textColor:\"primary\",indicatorColor:\"primary\",children:[/*#__PURE__*/_jsx(Tab,{label:firstTab}),(!DISABLED_MINTS.has(mint&&mint.toString())||localStorage.getItem('sollet-private'))&&/*#__PURE__*/_jsx(Tab,{label:secondTab})]});}var displaySolAddress=publicKey.equals(owner)||isAssociatedToken;var depositAddressStr=displaySolAddress?owner.toBase58():publicKey.toBase58();return/*#__PURE__*/_jsxs(DialogForm,{open:open,onClose:onClose,maxWidth:\"sm\",fullWidth:true,children:[/*#__PURE__*/_jsxs(DialogTitle,{children:[\"Deposit \",tokenName!==null&&tokenName!==void 0?tokenName:mint.toBase58(),tokenSymbol?\" (\".concat(tokenSymbol,\")\"):null,ethAccount&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(Typography,{color:\"textSecondary\",style:{fontSize:'14px'},children:[\"Metamask connected: \",ethAccount]})})]}),tabs,/*#__PURE__*/_jsx(DialogContent,{style:{paddingTop:16},children:tab===0?/*#__PURE__*/_jsxs(_Fragment,{children:[!displaySolAddress&&isAssociatedToken===false?/*#__PURE__*/_jsxs(DialogContentText,{children:[\"This address can only be used to receive\",' ',tokenSymbol!==null&&tokenSymbol!==void 0?tokenSymbol:abbreviateAddress(mint),\". Do not send SOL to this address.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"b\",{style:{color:'red'},children:\"WARNING\"}),\": You are using a deprecated account type. Please migrate your tokens. Ideally, create a new wallet. If you send to this address from a poorly implemented wallet, you may burn tokens.\"]}):/*#__PURE__*/_jsxs(DialogContentText,{children:[\"This address can be used to receive\",' ',tokenSymbol!==null&&tokenSymbol!==void 0?tokenSymbol:abbreviateAddress(mint),\".\"]}),/*#__PURE__*/_jsx(CopyableDisplay,{value:depositAddressStr,label:'Deposit Address',autoFocus:true,qrCode:true}),/*#__PURE__*/_jsx(DialogContentText,{variant:\"body2\",children:/*#__PURE__*/_jsx(Link,{href:\"https://solscan.io/account/\".concat(depositAddressStr)+urlSuffix,target:\"_blank\",rel:\"noopener\",children:\"View on Solscan\"})})]}):/*#__PURE__*/_jsx(SolletSwapDepositAddress,{balanceInfo:balanceInfo,swapInfo:swapInfo,ethAccount:ethAccount})}),/*#__PURE__*/_jsx(DialogActions,{children:/*#__PURE__*/_jsx(Button,{onClick:onClose,children:\"Close\"})})]});}function SolletSwapDepositAddress(_ref2){var balanceInfo=_ref2.balanceInfo,swapInfo=_ref2.swapInfo,ethAccount=_ref2.ethAccount;var _useAsyncData=useAsyncData(function(){return getErc20Balance(ethAccount);},'ethBalance',{refreshInterval:2000}),_useAsyncData2=_slicedToArray(_useAsyncData,1),ethBalance=_useAsyncData2[0];var ethFeeData=useAsyncData(swapInfo.coin&&function(){return estimateErc20SwapFees({erc20Address:swapInfo.coin.erc20Contract,swapAddress:swapInfo.address,ethAccount:ethAccount});},'depositEthFee',{refreshInterval:2000});if(!swapInfo){return null;}var ethFeeEstimate=Array.isArray(ethFeeData[0])?ethFeeData[0].reduce(function(acc,elem){return acc+elem;}):ethFeeData[0];var insufficientEthBalance=typeof ethBalance==='number'&&typeof ethFeeEstimate==='number'&&ethBalance<ethFeeEstimate;var blockchain=swapInfo.blockchain,address=swapInfo.address,memo=swapInfo.memo,coin=swapInfo.coin;var mint=balanceInfo.mint,tokenName=balanceInfo.tokenName;if(blockchain==='btc'&&memo===null){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(DialogContentText,{children:[\"Native BTC can be converted to SPL \",tokenName,\" by sending it to the following address:\"]}),/*#__PURE__*/_jsx(CopyableDisplay,{value:address,label:\"Native BTC Deposit Address\",autoFocus:true,qrCode:\"bitcoin:\".concat(address)})]});}if(blockchain==='eth'){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(DialogContentText,{children:[coin.erc20Contract?'ERC20':'Native',\" \",coin.ticker,\" can be converted to \",mint?'SPL':'native',\" \",tokenName,\" via MetaMask. To convert, you must already have SOL in your wallet.\"]}),/*#__PURE__*/_jsxs(DialogContentText,{children:[\"Estimated withdrawal transaction fee:\",/*#__PURE__*/_jsx(EthFeeEstimate,{ethFeeData:ethFeeData,insufficientEthBalance:insufficientEthBalance})]}),/*#__PURE__*/_jsx(MetamaskDeposit,{swapInfo:swapInfo,insufficientEthBalance:insufficientEthBalance})]});}return null;}function MetamaskDeposit(_ref3){var swapInfo=_ref3.swapInfo,insufficientEthBalance=_ref3.insufficientEthBalance;var ethAccount=useEthAccount();var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),amount=_useState4[0],setAmount=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),submitted=_useState6[0],setSubmitted=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),status=_useState8[0],setStatus=_useState8[1];var callAsync=useCallAsync();var swapAddress=swapInfo.address,destination=swapInfo.memo,_swapInfo$coin=swapInfo.coin,erc20Address=_swapInfo$coin.erc20Contract,ticker=_swapInfo$coin.ticker;var _useAsyncData3=useAsyncData(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _swapInfo$maxSize;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!ethAccount){_context.next=7;break;}_context.t0=Math;_context.next=4;return getErc20Balance(ethAccount,erc20Address);case 4:_context.t1=_context.sent;_context.t2=(_swapInfo$maxSize=swapInfo.maxSize)!==null&&_swapInfo$maxSize!==void 0?_swapInfo$maxSize:Infinity;return _context.abrupt(\"return\",_context.t0.min.call(_context.t0,_context.t1,_context.t2));case 7:return _context.abrupt(\"return\",0);case 8:case\"end\":return _context.stop();}}},_callee);})),tuple(getErc20Balance,ethAccount,erc20Address)),_useAsyncData4=_slicedToArray(_useAsyncData3,2),maxAmount=_useAsyncData4[0],maxAmountLoaded=_useAsyncData4[1];if(!ethAccount){return/*#__PURE__*/_jsx(ConnectToMetamaskButton,{});}function submit(){return _submit.apply(this,arguments);}function _submit(){_submit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:setSubmitted(true);setStatus({step:0});_context3.next=4;return callAsync(_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var parsedAmount;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:parsedAmount=parseFloat(amount);if(!(!parsedAmount||parsedAmount>maxAmount||parsedAmount<=0)){_context2.next=3;break;}throw new Error('Invalid amount');case 3:_context2.next=5;return swapErc20ToSpl({ethAccount:ethAccount,erc20Address:erc20Address,swapAddress:swapAddress,destination:destination,amount:amount,onStatusChange:function onStatusChange(e){return setStatus(function(status){return _objectSpread(_objectSpread({},status),e);});}});case 5:case\"end\":return _context2.stop();}}},_callee2);}))(),{onError:function onError(){return setSubmitted(false);}});case 4:case\"end\":return _context3.stop();}}},_callee3);}));return _submit.apply(this,arguments);}if(!submitted){var convertButton=/*#__PURE__*/_jsx(Button,{color:\"primary\",style:{marginLeft:8},onClick:submit,disabled:insufficientEthBalance,children:\"Convert\"});if(insufficientEthBalance){convertButton=/*#__PURE__*/_jsx(Tooltip,{title:\"Insufficient ETH for withdrawal transaction fee\",placement:\"top\",children:/*#__PURE__*/_jsx(\"span\",{children:convertButton})});}return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'baseline'},children:[/*#__PURE__*/_jsx(TextField,{label:\"Amount\",fullWidth:true,variant:\"outlined\",margin:\"normal\",type:\"number\",InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:ticker}),inputProps:{step:'any'}},value:amount,onChange:function onChange(e){return setAmount(e.target.value.trim());},helperText:maxAmountLoaded?/*#__PURE__*/_jsxs(\"span\",{onClick:function onClick(){return setAmount(maxAmount.toFixed(6));},children:[\"Max: \",maxAmount.toFixed(6)]}):null}),convertButton]});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Stepper,{activeStep:status.step,children:[/*#__PURE__*/_jsx(Step,{children:/*#__PURE__*/_jsx(StepLabel,{children:\"Approve Conversion\"})}),/*#__PURE__*/_jsx(Step,{children:/*#__PURE__*/_jsx(StepLabel,{children:\"Send Funds\"})}),/*#__PURE__*/_jsx(Step,{children:/*#__PURE__*/_jsx(StepLabel,{children:\"Wait for Confirmations\"})})]}),status.step===2?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{marginRight:16},children:/*#__PURE__*/_jsx(CircularProgress,{})}),/*#__PURE__*/_jsxs(\"div\",{children:[status.confirms?/*#__PURE__*/_jsxs(Typography,{children:[status.confirms,\" / 12 Confirmations\"]}):/*#__PURE__*/_jsx(Typography,{children:\"Transaction Pending\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:/*#__PURE__*/_jsx(Link,{href:\"https://etherscan.io/tx/\".concat(status.txid),target:\"_blank\",rel:\"noopener\",children:\"View on Etherscan\"})})]})]})}):null]});}","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/src/components/DepositDialog.js"],"names":["React","useState","DialogTitle","DialogContent","DialogForm","abbreviateAddress","CopyableDisplay","useSolanaExplorerUrlSuffix","Typography","DialogActions","Button","useAsyncData","tuple","useCallAsync","ConnectToMetamaskButton","getErc20Balance","swapErc20ToSpl","useEthAccount","estimateErc20SwapFees","InputAdornment","TextField","Stepper","Step","StepLabel","CircularProgress","Link","Tabs","Tab","DialogContentText","Tooltip","EthFeeEstimate","DISABLED_MINTS","Set","DepositDialog","open","onClose","publicKey","balanceInfo","swapInfo","isAssociatedToken","ethAccount","urlSuffix","mint","tokenName","tokenSymbol","owner","tab","setTab","coin","erc20Contract","tabs","firstTab","ticker","secondTab","e","value","has","toString","localStorage","getItem","displaySolAddress","equals","depositAddressStr","toBase58","fontSize","paddingTop","color","SolletSwapDepositAddress","refreshInterval","ethBalance","ethFeeData","erc20Address","swapAddress","address","ethFeeEstimate","Array","isArray","reduce","acc","elem","insufficientEthBalance","blockchain","memo","MetamaskDeposit","amount","setAmount","submitted","setSubmitted","status","setStatus","callAsync","destination","Math","maxSize","Infinity","min","maxAmount","maxAmountLoaded","submit","step","parsedAmount","parseFloat","Error","onStatusChange","onError","convertButton","marginLeft","display","alignItems","endAdornment","inputProps","target","trim","toFixed","justifyContent","marginRight","confirms","txid"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogForm from './DialogForm';\nimport { abbreviateAddress } from '../utils/utils';\nimport CopyableDisplay from './CopyableDisplay';\nimport { useSolanaExplorerUrlSuffix } from '../utils/connection';\nimport Typography from '@material-ui/core/Typography';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport tuple from 'immutable-tuple';\nimport { useCallAsync } from '../utils/notifications';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  swapErc20ToSpl,\n  useEthAccount,\n  estimateErc20SwapFees,\n} from '../utils/swap/eth';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Link from '@material-ui/core/Link';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { DialogContentText, Tooltip } from '@material-ui/core';\nimport { EthFeeEstimate } from './EthFeeEstimate';\n\nconst DISABLED_MINTS = new Set(['ABE7D8RU1eHfCJWzHYZZeymeE8k9nPPXfqge2NQYyKoL']);\n\nexport default function DepositDialog({\n  open,\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapInfo,\n  isAssociatedToken,\n}) {\n  const ethAccount = useEthAccount();\n  const urlSuffix = useSolanaExplorerUrlSuffix();\n  const { mint, tokenName, tokenSymbol, owner } = balanceInfo;\n  const [tab, setTab] = useState(0);\n\n  // SwapInfos to ignore.\n  if (swapInfo && swapInfo.coin && swapInfo.coin.erc20Contract === '0x2b2e04bf86978b45bb2edf54aca876973bdd43c0') {\n    swapInfo = null;\n  }\n\n  let tabs = null;\n  if (swapInfo) {\n    let firstTab = `SPL ${tokenSymbol ?? swapInfo.coin.ticker}`;\n    let secondTab = swapInfo.coin.ticker;\n    if (!mint) {\n      firstTab = 'SOL';\n    } else {\n      secondTab = `${\n        swapInfo.coin.erc20Contract ? 'ERC20' : 'Native'\n      } ${secondTab}`;\n    }\n    tabs = (\n      <Tabs\n        value={tab}\n        variant=\"fullWidth\"\n        onChange={(e, value) => setTab(value)}\n        textColor=\"primary\"\n        indicatorColor=\"primary\"\n      >\n        <Tab label={firstTab} />\n        {(!DISABLED_MINTS.has(mint && mint.toString()) ||\n          localStorage.getItem('sollet-private')) && <Tab label={secondTab} />}\n      </Tabs>\n    );\n  }\n  const displaySolAddress = publicKey.equals(owner) || isAssociatedToken;\n  const depositAddressStr = displaySolAddress\n    ? owner.toBase58()\n    : publicKey.toBase58();\n  return (\n    <DialogForm open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        Deposit {tokenName ?? mint.toBase58()}\n        {tokenSymbol ? ` (${tokenSymbol})` : null}\n        {ethAccount && (\n          <div>\n            <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n              Metamask connected: {ethAccount}\n            </Typography>\n          </div>\n        )}\n      </DialogTitle>\n      {tabs}\n      <DialogContent style={{ paddingTop: 16 }}>\n        {tab === 0 ? (\n          <>\n            {!displaySolAddress && isAssociatedToken === false ? (\n              <DialogContentText>\n                This address can only be used to receive{' '}\n                {tokenSymbol ?? abbreviateAddress(mint)}. Do not send SOL to\n                this address.\n                <br />\n                <b style={{ color: 'red' }}>WARNING</b>: You are using a deprecated account type. Please migrate your tokens. Ideally, create a new wallet. If you send to this address from a poorly implemented wallet, you may burn tokens.\n              </DialogContentText>\n            ) : (\n              <DialogContentText>\n                This address can be used to receive{' '}\n                {tokenSymbol ?? abbreviateAddress(mint)}.\n              </DialogContentText>\n            )}\n            <CopyableDisplay\n              value={depositAddressStr}\n              label={'Deposit Address'}\n              autoFocus\n              qrCode\n            />\n            <DialogContentText variant=\"body2\">\n              <Link\n                href={\n                  `https://solscan.io/account/${depositAddressStr}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Solscan\n              </Link>\n            </DialogContentText>\n          </>\n        ) : (\n          <SolletSwapDepositAddress\n            balanceInfo={balanceInfo}\n            swapInfo={swapInfo}\n            ethAccount={ethAccount}\n          />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </DialogForm>\n  );\n}\n\nfunction SolletSwapDepositAddress({ balanceInfo, swapInfo, ethAccount }) {\n  const [ethBalance] = useAsyncData(\n    () => getErc20Balance(ethAccount),\n    'ethBalance',\n    {\n      refreshInterval: 2000,\n    },\n  );\n\n  const ethFeeData = useAsyncData(\n    swapInfo.coin &&\n      (() =>\n        estimateErc20SwapFees({\n          erc20Address: swapInfo.coin.erc20Contract,\n          swapAddress: swapInfo.address,\n          ethAccount,\n        })),\n    'depositEthFee',\n    {\n      refreshInterval: 2000,\n    },\n  );\n\n  if (!swapInfo) {\n    return null;\n  }\n\n  const ethFeeEstimate = Array.isArray(ethFeeData[0])\n    ? ethFeeData[0].reduce((acc, elem) => acc + elem)\n    : ethFeeData[0];\n  const insufficientEthBalance =\n    typeof ethBalance === 'number' &&\n    typeof ethFeeEstimate === 'number' &&\n    ethBalance < ethFeeEstimate;\n\n  const { blockchain, address, memo, coin } = swapInfo;\n  const { mint, tokenName } = balanceInfo;\n\n  if (blockchain === 'btc' && memo === null) {\n    return (\n      <>\n        <DialogContentText>\n          Native BTC can be converted to SPL {tokenName} by sending it to the\n          following address:\n        </DialogContentText>\n        <CopyableDisplay\n          value={address}\n          label=\"Native BTC Deposit Address\"\n          autoFocus\n          qrCode={`bitcoin:${address}`}\n        />\n      </>\n    );\n  }\n\n  if (blockchain === 'eth') {\n    return (\n      <>\n        <DialogContentText>\n          {coin.erc20Contract ? 'ERC20' : 'Native'} {coin.ticker} can be\n          converted to {mint ? 'SPL' : 'native'} {tokenName} via MetaMask. To\n          convert, you must already have SOL in your wallet.\n        </DialogContentText>\n        <DialogContentText>\n          Estimated withdrawal transaction fee:\n          <EthFeeEstimate\n            ethFeeData={ethFeeData}\n            insufficientEthBalance={insufficientEthBalance}\n          />\n        </DialogContentText>\n        <MetamaskDeposit\n          swapInfo={swapInfo}\n          insufficientEthBalance={insufficientEthBalance}\n        />\n      </>\n    );\n  }\n\n  return null;\n}\n\nfunction MetamaskDeposit({ swapInfo, insufficientEthBalance }) {\n  const ethAccount = useEthAccount();\n  const [amount, setAmount] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [status, setStatus] = useState(null);\n  const callAsync = useCallAsync();\n\n  const {\n    address: swapAddress,\n    memo: destination,\n    coin: { erc20Contract: erc20Address, ticker },\n  } = swapInfo;\n\n  const [maxAmount, maxAmountLoaded] = useAsyncData(async () => {\n    if (ethAccount) {\n      return Math.min(\n        await getErc20Balance(ethAccount, erc20Address),\n        swapInfo.maxSize ?? Infinity,\n      );\n    }\n    return 0;\n  }, tuple(getErc20Balance, ethAccount, erc20Address));\n\n  if (!ethAccount) {\n    return <ConnectToMetamaskButton />;\n  }\n\n  async function submit() {\n    setSubmitted(true);\n    setStatus({ step: 0 });\n    await callAsync(\n      (async () => {\n        let parsedAmount = parseFloat(amount);\n\n        if (!parsedAmount || parsedAmount > maxAmount || parsedAmount <= 0) {\n          throw new Error('Invalid amount');\n        }\n        await swapErc20ToSpl({\n          ethAccount,\n          erc20Address,\n          swapAddress,\n          destination,\n          amount,\n          onStatusChange: (e) => setStatus((status) => ({ ...status, ...e })),\n        });\n      })(),\n      { onError: () => setSubmitted(false) },\n    );\n  }\n\n  if (!submitted) {\n    let convertButton = (\n      <Button\n        color=\"primary\"\n        style={{ marginLeft: 8 }}\n        onClick={submit}\n        disabled={insufficientEthBalance}\n      >\n        Convert\n      </Button>\n    );\n\n    if (insufficientEthBalance) {\n      convertButton = (\n        <Tooltip\n          title=\"Insufficient ETH for withdrawal transaction fee\"\n          placement=\"top\"\n        >\n          <span>{convertButton}</span>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <div style={{ display: 'flex', alignItems: 'baseline' }}>\n        <TextField\n          label=\"Amount\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          type=\"number\"\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">{ticker}</InputAdornment>\n            ),\n            inputProps: {\n              step: 'any',\n            },\n          }}\n          value={amount}\n          onChange={(e) => setAmount(e.target.value.trim())}\n          helperText={\n            maxAmountLoaded ? (\n              <span onClick={() => setAmount(maxAmount.toFixed(6))}>\n                Max: {maxAmount.toFixed(6)}\n              </span>\n            ) : null\n          }\n        />\n        {convertButton}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Stepper activeStep={status.step}>\n        <Step>\n          <StepLabel>Approve Conversion</StepLabel>\n        </Step>\n        <Step>\n          <StepLabel>Send Funds</StepLabel>\n        </Step>\n        <Step>\n          <StepLabel>Wait for Confirmations</StepLabel>\n        </Step>\n      </Stepper>\n      {status.step === 2 ? (\n        <>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <div style={{ marginRight: 16 }}>\n              <CircularProgress />\n            </div>\n            <div>\n              {status.confirms ? (\n                <Typography>{status.confirms} / 12 Confirmations</Typography>\n              ) : (\n                <Typography>Transaction Pending</Typography>\n              )}\n              <Typography variant=\"body2\">\n                <Link\n                  href={`https://etherscan.io/tx/${status.txid}`}\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  View on Etherscan\n                </Link>\n              </Typography>\n            </div>\n          </div>\n        </>\n      ) : null}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}