{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _asyncToGenerator = require(\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReverseTwitterRegistry = exports.ReverseTwitterRegistryState = exports.getTwitterRegistryData = exports.getTwitterHandleandRegistryKeyViaFilters = exports.getHandleAndRegistryKey = exports.getTwitterRegistry = exports.getTwitterRegistryKey = exports.deleteTwitterRegistry = exports.changeVerifiedPubkey = exports.changeTwitterRegistryData = exports.createVerifiedTwitterRegistry = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY = exports.TWITTER_VERIFICATION_AUTHORITY = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar bindings_1 = require(\"./bindings\");\n\nvar instructions_1 = require(\"./instructions\");\n\nvar state_1 = require(\"./state\");\n\nvar utils_1 = require(\"./utils\");\n\nvar borsh_1 = require(\"borsh\"); ////////////////////////////////////////////////////\n// Global Variables\n\n\nexports.TWITTER_VERIFICATION_AUTHORITY = new web3_js_1.PublicKey('FvPH7PrVrLGKPfqaf3xJodFTjZriqrAXXLTVWEorTFBi'); // The address of the name registry that will be a parent to all twitter handle registries,\n// it should be owned by the TWITTER_VERIFICATION_AUTHORITY and it's name is irrelevant\n\nexports.TWITTER_ROOT_PARENT_REGISTRY_KEY = new web3_js_1.PublicKey('4YcexoW3r78zz16J2aqmukBLRwGq6rAvWzJpkYAXqebv'); ////////////////////////////////////////////////////\n// Bindings\n// Signed by the authority, the payer and the verified pubkey\n\nfunction createVerifiedTwitterRegistry(_x, _x2, _x3, _x4, _x5) {\n  return _createVerifiedTwitterRegistry.apply(this, arguments);\n}\n\nfunction _createVerifiedTwitterRegistry() {\n  _createVerifiedTwitterRegistry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, twitterHandle, verifiedPubkey, space, // The space that the user will have to write data into the verified registry\n  payerKey) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, instructions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return utils_1.getHashedName(twitterHandle);\n\n          case 2:\n            hashedTwitterHandle = _context2.sent;\n            _context2.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context2.sent;\n            _context2.t0 = instructions_1;\n            _context2.t1 = bindings_1.NAME_PROGRAM_ID;\n            _context2.t2 = web3_js_1.SystemProgram.programId;\n            _context2.t3 = twitterHandleRegistryKey;\n            _context2.t4 = verifiedPubkey;\n            _context2.t5 = payerKey;\n            _context2.t6 = hashedTwitterHandle;\n            _context2.t7 = utils_1.Numberu64;\n            _context2.next = 16;\n            return connection.getMinimumBalanceForRentExemption(space);\n\n          case 16:\n            _context2.t8 = _context2.sent;\n            _context2.t9 = new _context2.t7(_context2.t8);\n            _context2.t10 = space;\n            _context2.t11 = undefined;\n            _context2.t12 = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY;\n            _context2.t13 = exports.TWITTER_VERIFICATION_AUTHORITY // Twitter authority acts as owner of the parent for all user-facing registries\n            ;\n            _context2.t14 = _context2.t0.createInstruction.call(_context2.t0, _context2.t1, _context2.t2, _context2.t3, _context2.t4, _context2.t5, _context2.t6, _context2.t9, _context2.t10, _context2.t11, _context2.t12, _context2.t13);\n            instructions = [_context2.t14];\n            _context2.t15 = instructions;\n            _context2.next = 27;\n            return createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, verifiedPubkey, payerKey);\n\n          case 27:\n            _context2.t16 = _context2.sent;\n            instructions = _context2.t15.concat.call(_context2.t15, _context2.t16);\n            return _context2.abrupt(\"return\", instructions);\n\n          case 30:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createVerifiedTwitterRegistry.apply(this, arguments);\n}\n\nexports.createVerifiedTwitterRegistry = createVerifiedTwitterRegistry; // Overwrite the data that is written in the user facing registry\n// Signed by the verified pubkey\n\nfunction changeTwitterRegistryData(_x6, _x7, _x8, _x9) {\n  return _changeTwitterRegistryData.apply(this, arguments);\n}\n\nfunction _changeTwitterRegistryData() {\n  _changeTwitterRegistryData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(twitterHandle, verifiedPubkey, offset, // The offset at which to write the input data into the NameRegistryData\n  input_data) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, instructions;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return utils_1.getHashedName(twitterHandle);\n\n          case 2:\n            hashedTwitterHandle = _context3.sent;\n            _context3.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context3.sent;\n            instructions = [instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, new utils_1.Numberu32(offset), input_data, verifiedPubkey)];\n            return _context3.abrupt(\"return\", instructions);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _changeTwitterRegistryData.apply(this, arguments);\n}\n\nexports.changeTwitterRegistryData = changeTwitterRegistryData; // Change the verified pubkey for a given twitter handle\n// Signed by the Authority, the verified pubkey and the payer\n\nfunction changeVerifiedPubkey(_x10, _x11, _x12, _x13, _x14) {\n  return _changeVerifiedPubkey.apply(this, arguments);\n}\n\nfunction _changeVerifiedPubkey() {\n  _changeVerifiedPubkey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection, twitterHandle, currentVerifiedPubkey, newVerifiedPubkey, payerKey) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, instructions, currentHashedVerifiedPubkey, currentReverseRegistryKey;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return utils_1.getHashedName(twitterHandle);\n\n          case 2:\n            hashedTwitterHandle = _context4.sent;\n            _context4.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context4.sent;\n            // Transfer the user-facing registry ownership\n            instructions = [instructions_1.transferInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, newVerifiedPubkey, currentVerifiedPubkey, undefined)]; // Delete the current reverse registry\n\n            _context4.next = 9;\n            return utils_1.getHashedName(currentVerifiedPubkey.toString());\n\n          case 9:\n            currentHashedVerifiedPubkey = _context4.sent;\n            _context4.next = 12;\n            return utils_1.getNameAccountKey(currentHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n\n          case 12:\n            currentReverseRegistryKey = _context4.sent;\n            _context4.t0 = instructions;\n            _context4.next = 16;\n            return bindings_1.deleteNameRegistry(connection, currentVerifiedPubkey.toString(), payerKey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 16:\n            _context4.t1 = _context4.sent;\n\n            _context4.t0.push.call(_context4.t0, _context4.t1);\n\n            _context4.t2 = instructions;\n            _context4.next = 21;\n            return createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, newVerifiedPubkey, payerKey);\n\n          case 21:\n            _context4.t3 = _context4.sent;\n            instructions = _context4.t2.concat.call(_context4.t2, _context4.t3);\n            return _context4.abrupt(\"return\", instructions);\n\n          case 24:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _changeVerifiedPubkey.apply(this, arguments);\n}\n\nexports.changeVerifiedPubkey = changeVerifiedPubkey; // Delete the verified registry for a given twitter handle\n// Signed by the verified pubkey\n\nfunction deleteTwitterRegistry(_x15, _x16) {\n  return _deleteTwitterRegistry.apply(this, arguments);\n}\n\nfunction _deleteTwitterRegistry() {\n  _deleteTwitterRegistry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(twitterHandle, verifiedPubkey) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, hashedVerifiedPubkey, reverseRegistryKey, instructions;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return utils_1.getHashedName(twitterHandle);\n\n          case 2:\n            hashedTwitterHandle = _context5.sent;\n            _context5.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context5.sent;\n            _context5.next = 8;\n            return utils_1.getHashedName(verifiedPubkey.toString());\n\n          case 8:\n            hashedVerifiedPubkey = _context5.sent;\n            _context5.next = 11;\n            return utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 11:\n            reverseRegistryKey = _context5.sent;\n            instructions = [// Delete the user facing registry\n            instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, verifiedPubkey, verifiedPubkey), // Delete the reverse registry\n            instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, verifiedPubkey, verifiedPubkey)];\n            return _context5.abrupt(\"return\", instructions);\n\n          case 14:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _deleteTwitterRegistry.apply(this, arguments);\n}\n\nexports.deleteTwitterRegistry = deleteTwitterRegistry; //////////////////////////////////////////\n// Getter Functions\n// Returns the key of the user-facing registry\n\nfunction getTwitterRegistryKey(_x17) {\n  return _getTwitterRegistryKey.apply(this, arguments);\n}\n\nfunction _getTwitterRegistryKey() {\n  _getTwitterRegistryKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(twitter_handle) {\n    var hashedTwitterHandle;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return utils_1.getHashedName(twitter_handle);\n\n          case 2:\n            hashedTwitterHandle = _context6.sent;\n            _context6.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getTwitterRegistryKey.apply(this, arguments);\n}\n\nexports.getTwitterRegistryKey = getTwitterRegistryKey;\n\nfunction getTwitterRegistry(_x18, _x19) {\n  return _getTwitterRegistry.apply(this, arguments);\n}\n\nfunction _getTwitterRegistry() {\n  _getTwitterRegistry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(connection, twitter_handle) {\n    var hashedTwitterHandle, twitterHandleRegistryKey, registry;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return utils_1.getHashedName(twitter_handle);\n\n          case 2:\n            hashedTwitterHandle = _context7.sent;\n            _context7.next = 5;\n            return utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            twitterHandleRegistryKey = _context7.sent;\n            registry = state_1.NameRegistryState.retrieve(connection, twitterHandleRegistryKey);\n            return _context7.abrupt(\"return\", registry);\n\n          case 8:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getTwitterRegistry.apply(this, arguments);\n}\n\nexports.getTwitterRegistry = getTwitterRegistry;\n\nfunction getHandleAndRegistryKey(_x20, _x21) {\n  return _getHandleAndRegistryKey.apply(this, arguments);\n}\n\nfunction _getHandleAndRegistryKey() {\n  _getHandleAndRegistryKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(connection, verifiedPubkey) {\n    var hashedVerifiedPubkey, reverseRegistryKey, reverseRegistryState;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return utils_1.getHashedName(verifiedPubkey.toString());\n\n          case 2:\n            hashedVerifiedPubkey = _context8.sent;\n            _context8.next = 5;\n            return utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            reverseRegistryKey = _context8.sent;\n            _context8.next = 8;\n            return ReverseTwitterRegistryState.retrieve(connection, reverseRegistryKey);\n\n          case 8:\n            reverseRegistryState = _context8.sent;\n            return _context8.abrupt(\"return\", [reverseRegistryState.twitterHandle, new web3_js_1.PublicKey(reverseRegistryState.twitterRegistryKey)]);\n\n          case 10:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _getHandleAndRegistryKey.apply(this, arguments);\n}\n\nexports.getHandleAndRegistryKey = getHandleAndRegistryKey; // Uses the RPC node filtering feature, execution speed may vary\n\nfunction getTwitterHandleandRegistryKeyViaFilters(_x22, _x23) {\n  return _getTwitterHandleandRegistryKeyViaFilters.apply(this, arguments);\n}\n\nfunction _getTwitterHandleandRegistryKeyViaFilters() {\n  _getTwitterHandleandRegistryKeyViaFilters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(connection, verifiedPubkey) {\n    var filters, filteredAccounts, _iterator, _step, f, data, state;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            filters = [{\n              memcmp: {\n                offset: 0,\n                bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBase58()\n              }\n            }, {\n              memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBase58()\n              }\n            }, {\n              memcmp: {\n                offset: 64,\n                bytes: exports.TWITTER_VERIFICATION_AUTHORITY.toBase58()\n              }\n            }];\n            _context9.next = 3;\n            return utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n          case 3:\n            filteredAccounts = _context9.sent;\n            _iterator = _createForOfIteratorHelper(filteredAccounts);\n            _context9.prev = 5;\n\n            _iterator.s();\n\n          case 7:\n            if ((_step = _iterator.n()).done) {\n              _context9.next = 15;\n              break;\n            }\n\n            f = _step.value;\n\n            if (!(f.accountInfo.data.length > state_1.NameRegistryState.HEADER_LEN + 32)) {\n              _context9.next = 13;\n              break;\n            }\n\n            data = f.accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN);\n            state = borsh_1.deserialize(ReverseTwitterRegistryState.schema, ReverseTwitterRegistryState, data);\n            return _context9.abrupt(\"return\", [state.twitterHandle, new web3_js_1.PublicKey(state.twitterRegistryKey)]);\n\n          case 13:\n            _context9.next = 7;\n            break;\n\n          case 15:\n            _context9.next = 20;\n            break;\n\n          case 17:\n            _context9.prev = 17;\n            _context9.t0 = _context9[\"catch\"](5);\n\n            _iterator.e(_context9.t0);\n\n          case 20:\n            _context9.prev = 20;\n\n            _iterator.f();\n\n            return _context9.finish(20);\n\n          case 23:\n            throw new Error('Registry not found.');\n\n          case 24:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[5, 17, 20, 23]]);\n  }));\n  return _getTwitterHandleandRegistryKeyViaFilters.apply(this, arguments);\n}\n\nexports.getTwitterHandleandRegistryKeyViaFilters = getTwitterHandleandRegistryKeyViaFilters; // Uses the RPC node filtering feature, execution speed may vary\n// Does not give you the handle, but is an alternative to getHandlesAndKeysFromVerifiedPubkey + getTwitterRegistry to get the data\n\nfunction getTwitterRegistryData(_x24, _x25) {\n  return _getTwitterRegistryData.apply(this, arguments);\n}\n\nfunction _getTwitterRegistryData() {\n  _getTwitterRegistryData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(connection, verifiedPubkey) {\n    var filters, filteredAccounts;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            filters = [{\n              memcmp: {\n                offset: 0,\n                bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBytes()\n              }\n            }, {\n              memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBytes()\n              }\n            }, {\n              memcmp: {\n                offset: 64,\n                bytes: new web3_js_1.PublicKey(Buffer.alloc(32, 0)).toBase58()\n              }\n            }];\n            _context10.next = 3;\n            return utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n          case 3:\n            filteredAccounts = _context10.sent;\n\n            if (!(filteredAccounts.length > 1)) {\n              _context10.next = 6;\n              break;\n            }\n\n            throw new Error('Found more than one registry.');\n\n          case 6:\n            return _context10.abrupt(\"return\", filteredAccounts[0].accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN));\n\n          case 7:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _getTwitterRegistryData.apply(this, arguments);\n}\n\nexports.getTwitterRegistryData = getTwitterRegistryData; //////////////////////////////////////////////\n// Utils\n\nvar ReverseTwitterRegistryState = /*#__PURE__*/function () {\n  function ReverseTwitterRegistryState(obj) {\n    _classCallCheck(this, ReverseTwitterRegistryState);\n\n    this.twitterRegistryKey = obj.twitterRegistryKey;\n    this.twitterHandle = obj.twitterHandle;\n  }\n\n  _createClass(ReverseTwitterRegistryState, null, [{\n    key: \"retrieve\",\n    value: function () {\n      var _retrieve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, reverseTwitterAccountKey) {\n        var reverseTwitterAccount, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return connection.getAccountInfo(reverseTwitterAccountKey, 'processed');\n\n              case 2:\n                reverseTwitterAccount = _context.sent;\n\n                if (reverseTwitterAccount) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Invalid reverse Twitter account provided');\n\n              case 5:\n                res = borsh_1.deserializeUnchecked(this.schema, ReverseTwitterRegistryState, reverseTwitterAccount.data.slice(state_1.NameRegistryState.HEADER_LEN));\n                return _context.abrupt(\"return\", res);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function retrieve(_x26, _x27) {\n        return _retrieve.apply(this, arguments);\n      }\n\n      return retrieve;\n    }()\n  }]);\n\n  return ReverseTwitterRegistryState;\n}();\n\nexports.ReverseTwitterRegistryState = ReverseTwitterRegistryState;\nReverseTwitterRegistryState.schema = new Map([[ReverseTwitterRegistryState, {\n  kind: 'struct',\n  fields: [['twitterRegistryKey', [32]], ['twitterHandle', 'string']]\n}]]);\n\nfunction createReverseTwitterRegistry(_x28, _x29, _x30, _x31, _x32) {\n  return _createReverseTwitterRegistry.apply(this, arguments);\n}\n\nfunction _createReverseTwitterRegistry() {\n  _createReverseTwitterRegistry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(connection, twitterHandle, twitterRegistryKey, verifiedPubkey, payerKey) {\n    var hashedVerifiedPubkey, reverseRegistryKey, reverseTwitterRegistryStateBuff;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return utils_1.getHashedName(verifiedPubkey.toString());\n\n          case 2:\n            hashedVerifiedPubkey = _context11.sent;\n            _context11.next = 5;\n            return utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n\n          case 5:\n            reverseRegistryKey = _context11.sent;\n            reverseTwitterRegistryStateBuff = borsh_1.serialize(ReverseTwitterRegistryState.schema, new ReverseTwitterRegistryState({\n              twitterRegistryKey: twitterRegistryKey.toBytes(),\n              twitterHandle: twitterHandle\n            }));\n            _context11.t0 = instructions_1;\n            _context11.t1 = bindings_1.NAME_PROGRAM_ID;\n            _context11.t2 = web3_js_1.SystemProgram.programId;\n            _context11.t3 = reverseRegistryKey;\n            _context11.t4 = verifiedPubkey;\n            _context11.t5 = payerKey;\n            _context11.t6 = hashedVerifiedPubkey;\n            _context11.t7 = utils_1.Numberu64;\n            _context11.next = 17;\n            return connection.getMinimumBalanceForRentExemption(reverseTwitterRegistryStateBuff.length);\n\n          case 17:\n            _context11.t8 = _context11.sent;\n            _context11.t9 = new _context11.t7(_context11.t8);\n            _context11.t10 = reverseTwitterRegistryStateBuff.length;\n            _context11.t11 = exports.TWITTER_VERIFICATION_AUTHORITY;\n            _context11.t12 = // Twitter authority acts as class for all reverse-lookup registries\n            exports.TWITTER_ROOT_PARENT_REGISTRY_KEY;\n            _context11.t13 = // Reverse registries are also children of the root\n            exports.TWITTER_VERIFICATION_AUTHORITY;\n            _context11.t14 = _context11.t0.createInstruction.call(_context11.t0, _context11.t1, _context11.t2, _context11.t3, _context11.t4, _context11.t5, _context11.t6, _context11.t9, _context11.t10, _context11.t11, _context11.t12, _context11.t13);\n            _context11.t15 = instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(reverseTwitterRegistryStateBuff), exports.TWITTER_VERIFICATION_AUTHORITY);\n            return _context11.abrupt(\"return\", [_context11.t14, _context11.t15]);\n\n          case 26:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _createReverseTwitterRegistry.apply(this, arguments);\n}\n\nexports.createReverseTwitterRegistry = createReverseTwitterRegistry;","map":{"version":3,"sources":["../src/twitter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createReverseTwitterRegistry = exports.ReverseTwitterRegistryState = exports.getTwitterRegistryData = exports.getTwitterHandleandRegistryKeyViaFilters = exports.getHandleAndRegistryKey = exports.getTwitterRegistry = exports.getTwitterRegistryKey = exports.deleteTwitterRegistry = exports.changeVerifiedPubkey = exports.changeTwitterRegistryData = exports.createVerifiedTwitterRegistry = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY = exports.TWITTER_VERIFICATION_AUTHORITY = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bindings_1 = require(\"./bindings\");\nconst instructions_1 = require(\"./instructions\");\nconst state_1 = require(\"./state\");\nconst utils_1 = require(\"./utils\");\nconst borsh_1 = require(\"borsh\");\n////////////////////////////////////////////////////\n// Global Variables\nexports.TWITTER_VERIFICATION_AUTHORITY = new web3_js_1.PublicKey('FvPH7PrVrLGKPfqaf3xJodFTjZriqrAXXLTVWEorTFBi');\n// The address of the name registry that will be a parent to all twitter handle registries,\n// it should be owned by the TWITTER_VERIFICATION_AUTHORITY and it's name is irrelevant\nexports.TWITTER_ROOT_PARENT_REGISTRY_KEY = new web3_js_1.PublicKey('4YcexoW3r78zz16J2aqmukBLRwGq6rAvWzJpkYAXqebv');\n////////////////////////////////////////////////////\n// Bindings\n// Signed by the authority, the payer and the verified pubkey\nasync function createVerifiedTwitterRegistry(connection, twitterHandle, verifiedPubkey, space, // The space that the user will have to write data into the verified registry\npayerKey) {\n    // Create user facing registry\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    let instructions = [\n        instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, twitterHandleRegistryKey, verifiedPubkey, payerKey, hashedTwitterHandle, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(space)), space, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, exports.TWITTER_VERIFICATION_AUTHORITY // Twitter authority acts as owner of the parent for all user-facing registries\n        ),\n    ];\n    instructions = instructions.concat(await createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, verifiedPubkey, payerKey));\n    return instructions;\n}\nexports.createVerifiedTwitterRegistry = createVerifiedTwitterRegistry;\n// Overwrite the data that is written in the user facing registry\n// Signed by the verified pubkey\nasync function changeTwitterRegistryData(twitterHandle, verifiedPubkey, offset, // The offset at which to write the input data into the NameRegistryData\ninput_data) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const instructions = [\n        instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, new utils_1.Numberu32(offset), input_data, verifiedPubkey),\n    ];\n    return instructions;\n}\nexports.changeTwitterRegistryData = changeTwitterRegistryData;\n// Change the verified pubkey for a given twitter handle\n// Signed by the Authority, the verified pubkey and the payer\nasync function changeVerifiedPubkey(connection, twitterHandle, currentVerifiedPubkey, newVerifiedPubkey, payerKey) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    // Transfer the user-facing registry ownership\n    let instructions = [\n        instructions_1.transferInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, newVerifiedPubkey, currentVerifiedPubkey, undefined),\n    ];\n    // Delete the current reverse registry\n    const currentHashedVerifiedPubkey = await utils_1.getHashedName(currentVerifiedPubkey.toString());\n    const currentReverseRegistryKey = await utils_1.getNameAccountKey(currentHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n    instructions.push(await bindings_1.deleteNameRegistry(connection, currentVerifiedPubkey.toString(), payerKey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY));\n    // Create the new reverse registry\n    instructions = instructions.concat(await createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, newVerifiedPubkey, payerKey));\n    return instructions;\n}\nexports.changeVerifiedPubkey = changeVerifiedPubkey;\n// Delete the verified registry for a given twitter handle\n// Signed by the verified pubkey\nasync function deleteTwitterRegistry(twitterHandle, verifiedPubkey) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const hashedVerifiedPubkey = await utils_1.getHashedName(verifiedPubkey.toString());\n    const reverseRegistryKey = await utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const instructions = [\n        // Delete the user facing registry\n        instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, verifiedPubkey, verifiedPubkey),\n        // Delete the reverse registry\n        instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, verifiedPubkey, verifiedPubkey),\n    ];\n    return instructions;\n}\nexports.deleteTwitterRegistry = deleteTwitterRegistry;\n//////////////////////////////////////////\n// Getter Functions\n// Returns the key of the user-facing registry\nasync function getTwitterRegistryKey(twitter_handle) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitter_handle);\n    return await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n}\nexports.getTwitterRegistryKey = getTwitterRegistryKey;\nasync function getTwitterRegistry(connection, twitter_handle) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitter_handle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const registry = state_1.NameRegistryState.retrieve(connection, twitterHandleRegistryKey);\n    return registry;\n}\nexports.getTwitterRegistry = getTwitterRegistry;\nasync function getHandleAndRegistryKey(connection, verifiedPubkey) {\n    const hashedVerifiedPubkey = await utils_1.getHashedName(verifiedPubkey.toString());\n    const reverseRegistryKey = await utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    let reverseRegistryState = await ReverseTwitterRegistryState.retrieve(connection, reverseRegistryKey);\n    return [\n        reverseRegistryState.twitterHandle,\n        new web3_js_1.PublicKey(reverseRegistryState.twitterRegistryKey),\n    ];\n}\nexports.getHandleAndRegistryKey = getHandleAndRegistryKey;\n// Uses the RPC node filtering feature, execution speed may vary\nasync function getTwitterHandleandRegistryKeyViaFilters(connection, verifiedPubkey) {\n    const filters = [\n        {\n            memcmp: {\n                offset: 0,\n                bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBase58(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBase58(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 64,\n                bytes: exports.TWITTER_VERIFICATION_AUTHORITY.toBase58(),\n            },\n        },\n    ];\n    const filteredAccounts = await utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n    for (const f of filteredAccounts) {\n        if (f.accountInfo.data.length > state_1.NameRegistryState.HEADER_LEN + 32) {\n            let data = f.accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN);\n            let state = borsh_1.deserialize(ReverseTwitterRegistryState.schema, ReverseTwitterRegistryState, data);\n            return [state.twitterHandle, new web3_js_1.PublicKey(state.twitterRegistryKey)];\n        }\n    }\n    throw new Error('Registry not found.');\n}\nexports.getTwitterHandleandRegistryKeyViaFilters = getTwitterHandleandRegistryKeyViaFilters;\n// Uses the RPC node filtering feature, execution speed may vary\n// Does not give you the handle, but is an alternative to getHandlesAndKeysFromVerifiedPubkey + getTwitterRegistry to get the data\nasync function getTwitterRegistryData(connection, verifiedPubkey) {\n    const filters = [\n        {\n            memcmp: {\n                offset: 0,\n                bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBytes(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBytes(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 64,\n                bytes: new web3_js_1.PublicKey(Buffer.alloc(32, 0)).toBase58(),\n            },\n        },\n    ];\n    const filteredAccounts = await utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n    if (filteredAccounts.length > 1) {\n        throw new Error('Found more than one registry.');\n    }\n    return filteredAccounts[0].accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN);\n}\nexports.getTwitterRegistryData = getTwitterRegistryData;\n//////////////////////////////////////////////\n// Utils\nclass ReverseTwitterRegistryState {\n    constructor(obj) {\n        this.twitterRegistryKey = obj.twitterRegistryKey;\n        this.twitterHandle = obj.twitterHandle;\n    }\n    static async retrieve(connection, reverseTwitterAccountKey) {\n        let reverseTwitterAccount = await connection.getAccountInfo(reverseTwitterAccountKey, 'processed');\n        if (!reverseTwitterAccount) {\n            throw new Error('Invalid reverse Twitter account provided');\n        }\n        let res = borsh_1.deserializeUnchecked(this.schema, ReverseTwitterRegistryState, reverseTwitterAccount.data.slice(state_1.NameRegistryState.HEADER_LEN));\n        return res;\n    }\n}\nexports.ReverseTwitterRegistryState = ReverseTwitterRegistryState;\nReverseTwitterRegistryState.schema = new Map([\n    [\n        ReverseTwitterRegistryState,\n        {\n            kind: 'struct',\n            fields: [\n                ['twitterRegistryKey', [32]],\n                ['twitterHandle', 'string'],\n            ],\n        },\n    ],\n]);\nasync function createReverseTwitterRegistry(connection, twitterHandle, twitterRegistryKey, verifiedPubkey, payerKey) {\n    // Create the reverse lookup registry\n    const hashedVerifiedPubkey = await utils_1.getHashedName(verifiedPubkey.toString());\n    const reverseRegistryKey = await utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    let reverseTwitterRegistryStateBuff = borsh_1.serialize(ReverseTwitterRegistryState.schema, new ReverseTwitterRegistryState({\n        twitterRegistryKey: twitterRegistryKey.toBytes(),\n        twitterHandle,\n    }));\n    return [\n        instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, reverseRegistryKey, verifiedPubkey, payerKey, hashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(reverseTwitterRegistryStateBuff.length)), reverseTwitterRegistryStateBuff.length, exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n        exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, // Reverse registries are also children of the root\n        exports.TWITTER_VERIFICATION_AUTHORITY),\n        instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(reverseTwitterRegistryStateBuff), exports.TWITTER_VERIFICATION_AUTHORITY),\n    ];\n}\nexports.createReverseTwitterRegistry = createReverseTwitterRegistry;\n//# sourceMappingURL=twitter.js.map"]},"metadata":{},"sourceType":"script"}