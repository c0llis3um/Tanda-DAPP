{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _toConsumableArray from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import React,{useContext,useEffect,useMemo,useState}from'react';import*as bs58 from'bs58';import{Account,PublicKey}from'@solana/web3.js';import nacl from'tweetnacl';import{setInitialAccountInfo,useAccountInfo,useConnection}from'./connection';import{closeTokenAccount,createAndInitializeTokenAccount,createAssociatedTokenAccount,getOwnedTokenAccounts,nativeTransfer,transferTokens}from'./tokens';import{TOKEN_PROGRAM_ID}from'./tokens/instructions';import{ACCOUNT_LAYOUT,parseMintData,parseTokenAccountData}from'./tokens/data';import{useListener,useLocalStorageState,useRefEqual}from'./utils';import{useTokenInfo}from'./tokens/names';import{refreshCache,useAsyncData}from'./fetch-loop';import{useUnlockedMnemonicAndSeed,walletSeedChanged}from'./wallet-seed';import{WalletProviderFactory}from'./walletProvider/factory';import{getAccountFromSeed}from'./walletProvider/localStorage';import{useSnackbar}from'notistack';var DEFAULT_WALLET_SELECTOR={walletIndex:0,importedPubkey:undefined,ledger:false};export var Wallet=/*#__PURE__*/function(){function Wallet(connection,type,args){var _this=this;_classCallCheck(this,Wallet);this.getTokenAccountInfo=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var accounts;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getOwnedTokenAccounts(_this.connection,_this.publicKey);case 2:accounts=_context.sent;return _context.abrupt(\"return\",accounts.map(function(_ref2){var publicKey=_ref2.publicKey,accountInfo=_ref2.accountInfo;setInitialAccountInfo(_this.connection,publicKey,accountInfo);return{publicKey:publicKey,parsed:parseTokenAccountData(accountInfo.data)};}).sort(function(account1,account2){return account1.parsed.mint.toBase58().localeCompare(account2.parsed.mint.toBase58());}));case 4:case\"end\":return _context.stop();}}},_callee);}));this.createTokenAccount=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tokenAddress){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return createAndInitializeTokenAccount({connection:_this.connection,payer:_this,mintPublicKey:tokenAddress,newAccount:new Account()});case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref3.apply(this,arguments);};}();this.createAssociatedTokenAccount=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(splTokenMintAddress){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return createAssociatedTokenAccount({connection:_this.connection,wallet:_this,splTokenMintAddress:splTokenMintAddress});case 2:return _context3.abrupt(\"return\",_context3.sent);case 3:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref4.apply(this,arguments);};}();this.tokenAccountCost=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt(\"return\",_this.connection.getMinimumBalanceForRentExemption(ACCOUNT_LAYOUT.span));case 1:case\"end\":return _context4.stop();}}},_callee4);}));this.transferToken=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(source,destination,amount,mint,decimals){var memo,overrideDestinationCheck,_args5=arguments;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:memo=_args5.length>5&&_args5[5]!==undefined?_args5[5]:null;overrideDestinationCheck=_args5.length>6&&_args5[6]!==undefined?_args5[6]:false;if(!source.equals(_this.publicKey)){_context5.next=6;break;}if(!memo){_context5.next=5;break;}throw new Error('Memo not implemented');case 5:return _context5.abrupt(\"return\",_this.transferSol(destination,amount));case 6:_context5.next=8;return transferTokens({connection:_this.connection,owner:_this,sourcePublicKey:source,destinationPublicKey:destination,amount:amount,memo:memo,mint:mint,decimals:decimals,overrideDestinationCheck:overrideDestinationCheck});case 8:return _context5.abrupt(\"return\",_context5.sent);case 9:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x3,_x4,_x5,_x6,_x7){return _ref6.apply(this,arguments);};}();this.transferSol=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(destination,amount){return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:return _context6.abrupt(\"return\",nativeTransfer(_this.connection,_this,destination,amount));case 1:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x8,_x9){return _ref7.apply(this,arguments);};}();this.closeTokenAccount=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(publicKey){var skipPreflight,_args7=arguments;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:skipPreflight=_args7.length>1&&_args7[1]!==undefined?_args7[1]:false;_context7.next=3;return closeTokenAccount({connection:_this.connection,owner:_this,sourcePublicKey:publicKey,skipPreflight:skipPreflight});case 3:return _context7.abrupt(\"return\",_context7.sent);case 4:case\"end\":return _context7.stop();}}},_callee7);}));return function(_x10){return _ref8.apply(this,arguments);};}();this.signTransaction=/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(transaction){return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:return _context8.abrupt(\"return\",_this.provider.signTransaction(transaction));case 1:case\"end\":return _context8.stop();}}},_callee8);}));return function(_x11){return _ref9.apply(this,arguments);};}();this.createSignature=/*#__PURE__*/function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(message){return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:return _context9.abrupt(\"return\",_this.provider.createSignature(message));case 1:case\"end\":return _context9.stop();}}},_callee9);}));return function(_x12){return _ref10.apply(this,arguments);};}();this.connection=connection;this.type=type;this.provider=WalletProviderFactory.getProvider(type,args);}_createClass(Wallet,[{key:\"publicKey\",get:function get(){return this.provider.publicKey;}},{key:\"allowsExport\",get:function get(){return this.type==='local';}}]);return Wallet;}();Wallet.create=/*#__PURE__*/function(){var _ref16=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(connection,type,args){var instance;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:instance=new Wallet(connection,type,args);_context11.next=3;return instance.provider.init();case 3:return _context11.abrupt(\"return\",instance);case 4:case\"end\":return _context11.stop();}}},_callee11);}));return function(_x13,_x14,_x15){return _ref16.apply(this,arguments);};}();var WalletContext=/*#__PURE__*/React.createContext(null);export function WalletProvider(_ref11){var children=_ref11.children;useListener(walletSeedChanged,'change');var _useUnlockedMnemonicA=useUnlockedMnemonicAndSeed(),_useUnlockedMnemonicA2=_slicedToArray(_useUnlockedMnemonicA,1),_useUnlockedMnemonicA3=_useUnlockedMnemonicA2[0],mnemonic=_useUnlockedMnemonicA3.mnemonic,seed=_useUnlockedMnemonicA3.seed,importsEncryptionKey=_useUnlockedMnemonicA3.importsEncryptionKey,derivationPath=_useUnlockedMnemonicA3.derivationPath;var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar;var connection=useConnection();var _useState=useState(),_useState2=_slicedToArray(_useState,2),wallet=_useState2[0],setWallet=_useState2[1];// `privateKeyImports` are accounts imported *in addition* to HD wallets\nvar _useLocalStorageState=useLocalStorageState('walletPrivateKeyImports',{}),_useLocalStorageState2=_slicedToArray(_useLocalStorageState,2),privateKeyImports=_useLocalStorageState2[0],setPrivateKeyImports=_useLocalStorageState2[1];// `walletSelector` identifies which wallet to use.\nvar _useLocalStorageState3=useLocalStorageState('walletSelector',DEFAULT_WALLET_SELECTOR),_useLocalStorageState4=_slicedToArray(_useLocalStorageState3,2),walletSelector=_useLocalStorageState4[0],setWalletSelector=_useLocalStorageState4[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),_hardwareWalletAccount=_useState4[0],setHardwareWalletAccount=_useState4[1];// `walletCount` is the number of HD wallets.\nvar _useLocalStorageState5=useLocalStorageState('walletCount',1),_useLocalStorageState6=_slicedToArray(_useLocalStorageState5,2),walletCount=_useLocalStorageState6[0],setWalletCount=_useLocalStorageState6[1];if(walletSelector.ledger&&!_hardwareWalletAccount){walletSelector=DEFAULT_WALLET_SELECTOR;setWalletSelector(DEFAULT_WALLET_SELECTOR);}useEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(){var wallet,onDisconnect,args,message,account;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:if(seed){_context10.next=2;break;}return _context10.abrupt(\"return\",null);case 2:if(!walletSelector.ledger){_context10.next=20;break;}_context10.prev=3;onDisconnect=function onDisconnect(){setWalletSelector(DEFAULT_WALLET_SELECTOR);setHardwareWalletAccount(null);};args={onDisconnect:onDisconnect,derivationPath:walletSelector.derivationPath,account:walletSelector.account,change:walletSelector.change};_context10.next=8;return Wallet.create(connection,'ledger',args);case 8:wallet=_context10.sent;_context10.next=20;break;case 11:_context10.prev=11;_context10.t0=_context10[\"catch\"](3);console.log(\"received error using ledger wallet: \".concat(_context10.t0));message='Received error unlocking ledger';if(_context10.t0.statusCode){message+=\": \".concat(_context10.t0.statusCode);}enqueueSnackbar(message,{variant:'error'});setWalletSelector(DEFAULT_WALLET_SELECTOR);setHardwareWalletAccount(null);return _context10.abrupt(\"return\");case 20:if(wallet){_context10.next=25;break;}account=walletSelector.walletIndex!==undefined?getAccountFromSeed(Buffer.from(seed,'hex'),walletSelector.walletIndex,derivationPath):new Account(function(){var _privateKeyImports$wa=privateKeyImports[walletSelector.importedPubkey],nonce=_privateKeyImports$wa.nonce,ciphertext=_privateKeyImports$wa.ciphertext;return nacl.secretbox.open(bs58.decode(ciphertext),bs58.decode(nonce),importsEncryptionKey);}());_context10.next=24;return Wallet.create(connection,'local',{account:account});case 24:wallet=_context10.sent;case 25:setWallet(wallet);case 26:case\"end\":return _context10.stop();}}},_callee10,null,[[3,11]]);}))();},[connection,seed,walletSelector,privateKeyImports,importsEncryptionKey,setWalletSelector,enqueueSnackbar,derivationPath]);function addAccount(_ref13){var name=_ref13.name,importedAccount=_ref13.importedAccount,ledger=_ref13.ledger;if(importedAccount===undefined){name&&localStorage.setItem(\"name\".concat(walletCount),name);setWalletCount(walletCount+1);}else{var nonce=nacl.randomBytes(nacl.secretbox.nonceLength);var plaintext=importedAccount.secretKey;var ciphertext=nacl.secretbox(plaintext,nonce,importsEncryptionKey);// `useLocalStorageState` requires a new object.\nvar newPrivateKeyImports=_objectSpread({},privateKeyImports);newPrivateKeyImports[importedAccount.publicKey.toString()]={name:name,ciphertext:bs58.encode(ciphertext),nonce:bs58.encode(nonce)};setPrivateKeyImports(newPrivateKeyImports);}}var getWalletNames=function getWalletNames(){return JSON.stringify(_toConsumableArray(Array(walletCount).keys()).map(function(idx){return localStorage.getItem(\"name\".concat(idx));}));};var _useState5=useState(getWalletNames()),_useState6=_slicedToArray(_useState5,2),walletNames=_useState6[0],setWalletNames=_useState6[1];function setAccountName(selector,newName){if(selector.importedPubkey&&!selector.ledger){var newPrivateKeyImports=_objectSpread({},privateKeyImports);newPrivateKeyImports[selector.importedPubkey.toString()].name=newName;setPrivateKeyImports(newPrivateKeyImports);}else{localStorage.setItem(\"name\".concat(selector.walletIndex),newName);setWalletNames(getWalletNames());}}var _useMemo=useMemo(function(){if(!seed){return[[],[]];}var seedBuffer=Buffer.from(seed,'hex');var derivedAccounts=_toConsumableArray(Array(walletCount).keys()).map(function(idx){var address=getAccountFromSeed(seedBuffer,idx,derivationPath).publicKey;var name=localStorage.getItem(\"name\".concat(idx));return{selector:{walletIndex:idx,importedPubkey:undefined,ledger:false},isSelected:walletSelector.walletIndex===idx,address:address,name:idx===0?'Main account':name||\"Account \".concat(idx)};});var importedAccounts=Object.keys(privateKeyImports).map(function(pubkey){var name=privateKeyImports[pubkey].name;return{selector:{walletIndex:undefined,importedPubkey:pubkey,ledger:false},address:new PublicKey(bs58.decode(pubkey)),name:\"\".concat(name,\" (imported)\"),// TODO: do this in the Component with styling.\nisSelected:walletSelector.importedPubkey===pubkey};});var accounts=derivedAccounts.concat(importedAccounts);return[accounts,derivedAccounts];// eslint-disable-next-line react-hooks/exhaustive-deps\n},[seed,walletCount,walletSelector,privateKeyImports,walletNames]),_useMemo2=_slicedToArray(_useMemo,2),accounts=_useMemo2[0],derivedAccounts=_useMemo2[1];var hardwareWalletAccount;if(_hardwareWalletAccount){hardwareWalletAccount=_objectSpread(_objectSpread({},_hardwareWalletAccount),{},{selector:{walletIndex:undefined,ledger:true,importedPubkey:_hardwareWalletAccount.publicKey,derivationPath:_hardwareWalletAccount.derivationPath,account:_hardwareWalletAccount.account,change:_hardwareWalletAccount.change},address:_hardwareWalletAccount.publicKey,isSelected:walletSelector.ledger});}return/*#__PURE__*/_jsx(WalletContext.Provider,{value:{wallet:wallet,seed:seed,mnemonic:mnemonic,importsEncryptionKey:importsEncryptionKey,walletSelector:walletSelector,setWalletSelector:setWalletSelector,privateKeyImports:privateKeyImports,setPrivateKeyImports:setPrivateKeyImports,accounts:accounts,derivedAccounts:derivedAccounts,addAccount:addAccount,setAccountName:setAccountName,derivationPath:derivationPath,hardwareWalletAccount:hardwareWalletAccount,setHardwareWalletAccount:setHardwareWalletAccount},children:children});}export function useWallet(){return useContext(WalletContext).wallet;}export function useWalletPublicKeys(){var wallet=useWallet();var _useAsyncData=useAsyncData(wallet.getTokenAccountInfo,wallet.getTokenAccountInfo),_useAsyncData2=_slicedToArray(_useAsyncData,2),tokenAccountInfo=_useAsyncData2[0],loaded=_useAsyncData2[1];var publicKeys=[wallet.publicKey].concat(_toConsumableArray(tokenAccountInfo?tokenAccountInfo.map(function(_ref14){var publicKey=_ref14.publicKey;return publicKey;}):[]));// Prevent users from re-rendering unless the list of public keys actually changes\npublicKeys=useRefEqual(publicKeys,function(oldKeys,newKeys){return oldKeys.length===newKeys.length&&oldKeys.every(function(key,i){return key.equals(newKeys[i]);});});return[publicKeys,loaded];}export function useWalletTokenAccounts(){var wallet=useWallet();return useAsyncData(wallet.getTokenAccountInfo,wallet.getTokenAccountInfo);}export function refreshWalletPublicKeys(wallet){refreshCache(wallet.getTokenAccountInfo);}export function useWalletAddressForMint(mint){var _useWalletTokenAccoun=useWalletTokenAccounts(),_useWalletTokenAccoun2=_slicedToArray(_useWalletTokenAccoun,1),walletAccounts=_useWalletTokenAccoun2[0];return useMemo(function(){var _walletAccounts$find;return mint?walletAccounts===null||walletAccounts===void 0?void 0:(_walletAccounts$find=walletAccounts.find(function(account){var _account$parsed,_account$parsed$mint;return(_account$parsed=account.parsed)===null||_account$parsed===void 0?void 0:(_account$parsed$mint=_account$parsed.mint)===null||_account$parsed$mint===void 0?void 0:_account$parsed$mint.equals(mint);}))===null||_walletAccounts$find===void 0?void 0:_walletAccounts$find.publicKey.toBase58():null;},[walletAccounts,mint]);}export function useBalanceInfo(publicKey){var _useAccountInfo=useAccountInfo(publicKey),_useAccountInfo2=_slicedToArray(_useAccountInfo,2),accountInfo=_useAccountInfo2[0],accountInfoLoaded=_useAccountInfo2[1];var _ref15=(accountInfo===null||accountInfo===void 0?void 0:accountInfo.owner.equals(TOKEN_PROGRAM_ID))?parseTokenAccountData(accountInfo.data):{},mint=_ref15.mint,owner=_ref15.owner,amount=_ref15.amount;var _useAccountInfo3=useAccountInfo(mint),_useAccountInfo4=_slicedToArray(_useAccountInfo3,2),mintInfo=_useAccountInfo4[0],mintInfoLoaded=_useAccountInfo4[1];var _useTokenInfo=useTokenInfo(mint),name=_useTokenInfo.name,symbol=_useTokenInfo.symbol,logoUri=_useTokenInfo.logoUri;if(!accountInfoLoaded){return null;}if(mint&&mintInfoLoaded){try{var _parseMintData=parseMintData(mintInfo.data),decimals=_parseMintData.decimals;return{amount:amount,decimals:decimals,mint:mint,owner:owner,tokenName:name,tokenSymbol:symbol,tokenLogoUri:logoUri,valid:true};}catch(e){return{amount:amount,decimals:0,mint:mint,owner:owner,tokenName:'Invalid',tokenSymbol:'INVALID',tokenLogoUri:null,valid:false};}}if(!mint){var _accountInfo$lamports;return{amount:(_accountInfo$lamports=accountInfo===null||accountInfo===void 0?void 0:accountInfo.lamports)!==null&&_accountInfo$lamports!==void 0?_accountInfo$lamports:0,decimals:9,mint:null,owner:publicKey,tokenName:'SOL',tokenSymbol:'SOL',valid:true};}return null;}export function useWalletSelector(){var _useContext=useContext(WalletContext),accounts=_useContext.accounts,derivedAccounts=_useContext.derivedAccounts,addAccount=_useContext.addAccount,setWalletSelector=_useContext.setWalletSelector,setAccountName=_useContext.setAccountName,hardwareWalletAccount=_useContext.hardwareWalletAccount,setHardwareWalletAccount=_useContext.setHardwareWalletAccount;return{accounts:accounts,derivedAccounts:derivedAccounts,setWalletSelector:setWalletSelector,addAccount:addAccount,setAccountName:setAccountName,hardwareWalletAccount:hardwareWalletAccount,setHardwareWalletAccount:setHardwareWalletAccount};}","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/src/utils/wallet.js"],"names":["React","useContext","useEffect","useMemo","useState","bs58","Account","PublicKey","nacl","setInitialAccountInfo","useAccountInfo","useConnection","closeTokenAccount","createAndInitializeTokenAccount","createAssociatedTokenAccount","getOwnedTokenAccounts","nativeTransfer","transferTokens","TOKEN_PROGRAM_ID","ACCOUNT_LAYOUT","parseMintData","parseTokenAccountData","useListener","useLocalStorageState","useRefEqual","useTokenInfo","refreshCache","useAsyncData","useUnlockedMnemonicAndSeed","walletSeedChanged","WalletProviderFactory","getAccountFromSeed","useSnackbar","DEFAULT_WALLET_SELECTOR","walletIndex","importedPubkey","undefined","ledger","Wallet","connection","type","args","getTokenAccountInfo","publicKey","accounts","map","accountInfo","parsed","data","sort","account1","account2","mint","toBase58","localeCompare","createTokenAccount","tokenAddress","payer","mintPublicKey","newAccount","splTokenMintAddress","wallet","tokenAccountCost","getMinimumBalanceForRentExemption","span","transferToken","source","destination","amount","decimals","memo","overrideDestinationCheck","equals","Error","transferSol","owner","sourcePublicKey","destinationPublicKey","skipPreflight","signTransaction","transaction","provider","createSignature","message","getProvider","create","instance","init","WalletContext","createContext","WalletProvider","children","mnemonic","seed","importsEncryptionKey","derivationPath","enqueueSnackbar","setWallet","privateKeyImports","setPrivateKeyImports","walletSelector","setWalletSelector","_hardwareWalletAccount","setHardwareWalletAccount","walletCount","setWalletCount","onDisconnect","account","change","console","log","statusCode","variant","Buffer","from","nonce","ciphertext","secretbox","open","decode","addAccount","name","importedAccount","localStorage","setItem","randomBytes","nonceLength","plaintext","secretKey","newPrivateKeyImports","toString","encode","getWalletNames","JSON","stringify","Array","keys","idx","getItem","walletNames","setWalletNames","setAccountName","selector","newName","seedBuffer","derivedAccounts","address","isSelected","importedAccounts","Object","pubkey","concat","hardwareWalletAccount","useWallet","useWalletPublicKeys","tokenAccountInfo","loaded","publicKeys","oldKeys","newKeys","length","every","key","i","useWalletTokenAccounts","refreshWalletPublicKeys","useWalletAddressForMint","walletAccounts","find","useBalanceInfo","accountInfoLoaded","mintInfo","mintInfoLoaded","symbol","logoUri","tokenName","tokenSymbol","tokenLogoUri","valid","e","lamports","useWalletSelector"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport * as bs58 from 'bs58';\nimport { Account, PublicKey } from '@solana/web3.js';\nimport nacl from 'tweetnacl';\nimport {\n  setInitialAccountInfo,\n  useAccountInfo,\n  useConnection,\n} from './connection';\nimport {\n  closeTokenAccount,\n  createAndInitializeTokenAccount,\n  createAssociatedTokenAccount,\n  getOwnedTokenAccounts,\n  nativeTransfer,\n  transferTokens,\n} from './tokens';\nimport { TOKEN_PROGRAM_ID } from './tokens/instructions';\nimport {\n  ACCOUNT_LAYOUT,\n  parseMintData,\n  parseTokenAccountData,\n} from './tokens/data';\nimport { useListener, useLocalStorageState, useRefEqual } from './utils';\nimport { useTokenInfo } from './tokens/names';\nimport { refreshCache, useAsyncData } from './fetch-loop';\nimport { useUnlockedMnemonicAndSeed, walletSeedChanged } from './wallet-seed';\nimport { WalletProviderFactory } from './walletProvider/factory';\nimport { getAccountFromSeed } from './walletProvider/localStorage';\nimport { useSnackbar } from 'notistack';\n\nconst DEFAULT_WALLET_SELECTOR = {\n  walletIndex: 0,\n  importedPubkey: undefined,\n  ledger: false,\n};\n\nexport class Wallet {\n  constructor(connection, type, args) {\n    this.connection = connection;\n    this.type = type;\n    this.provider = WalletProviderFactory.getProvider(type, args);\n  }\n\n  static create = async (connection, type, args) => {\n    const instance = new Wallet(connection, type, args);\n    await instance.provider.init();\n    return instance;\n  };\n\n  get publicKey() {\n    return this.provider.publicKey;\n  }\n\n  get allowsExport() {\n    return this.type === 'local';\n  }\n\n  getTokenAccountInfo = async () => {\n    let accounts = await getOwnedTokenAccounts(this.connection, this.publicKey);\n    return accounts\n      .map(({ publicKey, accountInfo }) => {\n        setInitialAccountInfo(this.connection, publicKey, accountInfo);\n        return { publicKey, parsed: parseTokenAccountData(accountInfo.data) };\n      })\n      .sort((account1, account2) =>\n        account1.parsed.mint\n          .toBase58()\n          .localeCompare(account2.parsed.mint.toBase58()),\n      );\n  };\n\n  createTokenAccount = async (tokenAddress) => {\n    return await createAndInitializeTokenAccount({\n      connection: this.connection,\n      payer: this,\n      mintPublicKey: tokenAddress,\n      newAccount: new Account(),\n    });\n  };\n\n  createAssociatedTokenAccount = async (splTokenMintAddress) => {\n    return await createAssociatedTokenAccount({\n      connection: this.connection,\n      wallet: this,\n      splTokenMintAddress,\n    });\n  };\n\n  tokenAccountCost = async () => {\n    return this.connection.getMinimumBalanceForRentExemption(\n      ACCOUNT_LAYOUT.span,\n    );\n  };\n\n  transferToken = async (\n    source,\n    destination,\n    amount,\n    mint,\n    decimals,\n    memo = null,\n    overrideDestinationCheck = false,\n  ) => {\n    if (source.equals(this.publicKey)) {\n      if (memo) {\n        throw new Error('Memo not implemented');\n      }\n      return this.transferSol(destination, amount);\n    }\n    return await transferTokens({\n      connection: this.connection,\n      owner: this,\n      sourcePublicKey: source,\n      destinationPublicKey: destination,\n      amount,\n      memo,\n      mint,\n      decimals,\n      overrideDestinationCheck,\n    });\n  };\n\n  transferSol = async (destination, amount) => {\n    return nativeTransfer(this.connection, this, destination, amount);\n  };\n\n  closeTokenAccount = async (publicKey, skipPreflight = false) => {\n    return await closeTokenAccount({\n      connection: this.connection,\n      owner: this,\n      sourcePublicKey: publicKey,\n      skipPreflight,\n    });\n  };\n\n  signTransaction = async (transaction) => {\n    return this.provider.signTransaction(transaction);\n  };\n\n  createSignature = async (message) => {\n    return this.provider.createSignature(message);\n  };\n}\n\nconst WalletContext = React.createContext(null);\n\nexport function WalletProvider({ children }) {\n  useListener(walletSeedChanged, 'change');\n  const [{\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n  }] = useUnlockedMnemonicAndSeed();\n  const { enqueueSnackbar } = useSnackbar();\n  const connection = useConnection();\n  const [wallet, setWallet] = useState();\n\n  // `privateKeyImports` are accounts imported *in addition* to HD wallets\n  const [privateKeyImports, setPrivateKeyImports] = useLocalStorageState(\n    'walletPrivateKeyImports',\n    {},\n  );\n  // `walletSelector` identifies which wallet to use.\n  let [walletSelector, setWalletSelector] = useLocalStorageState(\n    'walletSelector',\n    DEFAULT_WALLET_SELECTOR,\n  );\n  const [_hardwareWalletAccount, setHardwareWalletAccount] = useState(null);\n\n  // `walletCount` is the number of HD wallets.\n  const [walletCount, setWalletCount] = useLocalStorageState('walletCount', 1);\n\n  if (walletSelector.ledger && !_hardwareWalletAccount) {\n    walletSelector = DEFAULT_WALLET_SELECTOR;\n    setWalletSelector(DEFAULT_WALLET_SELECTOR);\n  }\n\n  useEffect(() => {\n    (async () => {\n      if (!seed) {\n        return null;\n      }\n      let wallet;\n      if (walletSelector.ledger) {\n        try {\n          const onDisconnect = () => {\n            setWalletSelector(DEFAULT_WALLET_SELECTOR);\n            setHardwareWalletAccount(null);\n          };\n          const args = {\n            onDisconnect,\n            derivationPath: walletSelector.derivationPath,\n            account: walletSelector.account,\n            change: walletSelector.change,\n          };\n          wallet = await Wallet.create(connection, 'ledger', args);\n        } catch (e) {\n          console.log(`received error using ledger wallet: ${e}`);\n          let message = 'Received error unlocking ledger';\n          if (e.statusCode) {\n            message += `: ${e.statusCode}`;\n          }\n          enqueueSnackbar(message, { variant: 'error' });\n          setWalletSelector(DEFAULT_WALLET_SELECTOR);\n          setHardwareWalletAccount(null);\n          return;\n        }\n      }\n      if (!wallet) {\n        const account =\n          walletSelector.walletIndex !== undefined\n            ? getAccountFromSeed(\n                Buffer.from(seed, 'hex'),\n                walletSelector.walletIndex,\n                derivationPath,\n              )\n            : new Account(\n                (() => {\n                  const { nonce, ciphertext } = privateKeyImports[\n                    walletSelector.importedPubkey\n                  ];\n                  return nacl.secretbox.open(\n                    bs58.decode(ciphertext),\n                    bs58.decode(nonce),\n                    importsEncryptionKey,\n                  );\n                })(),\n              );\n        wallet = await Wallet.create(connection, 'local', { account });\n      }\n      setWallet(wallet);\n    })();\n  }, [\n    connection,\n    seed,\n    walletSelector,\n    privateKeyImports,\n    importsEncryptionKey,\n    setWalletSelector,\n    enqueueSnackbar,\n    derivationPath,\n  ]);\n  function addAccount({ name, importedAccount, ledger }) {\n    if (importedAccount === undefined) {\n      name && localStorage.setItem(`name${walletCount}`, name);\n      setWalletCount(walletCount + 1);\n    } else {\n      const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);\n      const plaintext = importedAccount.secretKey;\n      const ciphertext = nacl.secretbox(plaintext, nonce, importsEncryptionKey);\n      // `useLocalStorageState` requires a new object.\n      let newPrivateKeyImports = { ...privateKeyImports };\n      newPrivateKeyImports[importedAccount.publicKey.toString()] = {\n        name,\n        ciphertext: bs58.encode(ciphertext),\n        nonce: bs58.encode(nonce),\n      };\n      setPrivateKeyImports(newPrivateKeyImports);\n    }\n  }\n\n  const getWalletNames = () => {\n    return JSON.stringify(\n      [...Array(walletCount).keys()].map((idx) =>\n        localStorage.getItem(`name${idx}`),\n      ),\n    );\n  };\n  const [walletNames, setWalletNames] = useState(getWalletNames());\n  function setAccountName(selector, newName) {\n    if (selector.importedPubkey && !selector.ledger) {\n      let newPrivateKeyImports = { ...privateKeyImports };\n      newPrivateKeyImports[selector.importedPubkey.toString()].name = newName;\n      setPrivateKeyImports(newPrivateKeyImports);\n    } else {\n      localStorage.setItem(`name${selector.walletIndex}`, newName);\n      setWalletNames(getWalletNames());\n    }\n  }\n\n  const [accounts, derivedAccounts] = useMemo(() => {\n    if (!seed) {\n      return [[], []];\n    }\n\n    const seedBuffer = Buffer.from(seed, 'hex');\n    const derivedAccounts = [...Array(walletCount).keys()].map((idx) => {\n      let address = getAccountFromSeed(seedBuffer, idx, derivationPath)\n        .publicKey;\n      let name = localStorage.getItem(`name${idx}`);\n      return {\n        selector: {\n          walletIndex: idx,\n          importedPubkey: undefined,\n          ledger: false,\n        },\n        isSelected: walletSelector.walletIndex === idx,\n        address,\n        name: idx === 0 ? 'Main account' : name || `Account ${idx}`,\n      };\n    });\n\n    const importedAccounts = Object.keys(privateKeyImports).map((pubkey) => {\n      const { name } = privateKeyImports[pubkey];\n      return {\n        selector: {\n          walletIndex: undefined,\n          importedPubkey: pubkey,\n          ledger: false,\n        },\n        address: new PublicKey(bs58.decode(pubkey)),\n        name: `${name} (imported)`, // TODO: do this in the Component with styling.\n        isSelected: walletSelector.importedPubkey === pubkey,\n      };\n    });\n\n    const accounts = derivedAccounts.concat(importedAccounts);\n    return [accounts, derivedAccounts];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [seed, walletCount, walletSelector, privateKeyImports, walletNames]);\n\n  let hardwareWalletAccount;\n  if (_hardwareWalletAccount) {\n    hardwareWalletAccount = {\n      ..._hardwareWalletAccount,\n      selector: {\n        walletIndex: undefined,\n        ledger: true,\n        importedPubkey: _hardwareWalletAccount.publicKey,\n        derivationPath: _hardwareWalletAccount.derivationPath,\n        account: _hardwareWalletAccount.account,\n        change: _hardwareWalletAccount.change,\n      },\n      address: _hardwareWalletAccount.publicKey,\n      isSelected: walletSelector.ledger,\n    };\n  }\n\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        seed,\n        mnemonic,\n        importsEncryptionKey,\n        walletSelector,\n        setWalletSelector,\n        privateKeyImports,\n        setPrivateKeyImports,\n        accounts,\n        derivedAccounts,\n        addAccount,\n        setAccountName,\n        derivationPath,\n        hardwareWalletAccount,\n        setHardwareWalletAccount,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  return useContext(WalletContext).wallet;\n}\n\nexport function useWalletPublicKeys() {\n  let wallet = useWallet();\n  let [tokenAccountInfo, loaded] = useAsyncData(\n    wallet.getTokenAccountInfo,\n    wallet.getTokenAccountInfo,\n  );\n  let publicKeys = [\n    wallet.publicKey,\n    ...(tokenAccountInfo\n      ? tokenAccountInfo.map(({ publicKey }) => publicKey)\n      : []),\n  ];\n  // Prevent users from re-rendering unless the list of public keys actually changes\n  publicKeys = useRefEqual(\n    publicKeys,\n    (oldKeys, newKeys) =>\n      oldKeys.length === newKeys.length &&\n      oldKeys.every((key, i) => key.equals(newKeys[i])),\n  );\n  return [publicKeys, loaded];\n}\n\nexport function useWalletTokenAccounts() {\n  let wallet = useWallet();\n  return useAsyncData(wallet.getTokenAccountInfo, wallet.getTokenAccountInfo);\n}\n\nexport function refreshWalletPublicKeys(wallet) {\n  refreshCache(wallet.getTokenAccountInfo);\n}\n\nexport function useWalletAddressForMint(mint) {\n  const [walletAccounts] = useWalletTokenAccounts();\n  return useMemo(\n    () =>\n      mint\n        ? walletAccounts\n            ?.find((account) => account.parsed?.mint?.equals(mint))\n            ?.publicKey.toBase58()\n        : null,\n    [walletAccounts, mint],\n  );\n}\n\nexport function useBalanceInfo(publicKey) {\n  let [accountInfo, accountInfoLoaded] = useAccountInfo(publicKey);\n  let { mint, owner, amount } = accountInfo?.owner.equals(TOKEN_PROGRAM_ID)\n    ? parseTokenAccountData(accountInfo.data)\n    : {};\n  let [mintInfo, mintInfoLoaded] = useAccountInfo(mint);\n  let { name, symbol, logoUri } = useTokenInfo(mint);\n\n  if (!accountInfoLoaded) {\n    return null;\n  }\n\n  if (mint && mintInfoLoaded) {\n    try {\n      let { decimals } = parseMintData(mintInfo.data);\n      return {\n        amount,\n        decimals,\n        mint,\n        owner,\n        tokenName: name,\n        tokenSymbol: symbol,\n        tokenLogoUri: logoUri,\n        valid: true,\n      };\n    } catch (e) {\n      return {\n        amount,\n        decimals: 0,\n        mint,\n        owner,\n        tokenName: 'Invalid',\n        tokenSymbol: 'INVALID',\n        tokenLogoUri: null,\n        valid: false,\n      };\n    }\n  }\n\n  if (!mint) {\n    return {\n      amount: accountInfo?.lamports ?? 0,\n      decimals: 9,\n      mint: null,\n      owner: publicKey,\n      tokenName: 'SOL',\n      tokenSymbol: 'SOL',\n      valid: true,\n    };\n  }\n\n  return null;\n}\n\nexport function useWalletSelector() {\n  const {\n    accounts,\n    derivedAccounts,\n    addAccount,\n    setWalletSelector,\n    setAccountName,\n    hardwareWalletAccount,\n    setHardwareWalletAccount,\n  } = useContext(WalletContext);\n\n  return {\n    accounts,\n    derivedAccounts,\n    setWalletSelector,\n    addAccount,\n    setAccountName,\n    hardwareWalletAccount,\n    setHardwareWalletAccount,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}