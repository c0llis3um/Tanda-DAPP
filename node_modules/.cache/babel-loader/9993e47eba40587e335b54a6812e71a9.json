{"ast":null,"code":"import _slicedToArray from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{pbkdf2}from'crypto';import{randomBytes,secretbox}from'tweetnacl';import*as bip32 from'bip32';import bs58 from'bs58';import{EventEmitter}from'events';import{isExtension}from'./utils';import{useEffect,useState}from'react';export function normalizeMnemonic(mnemonic){return mnemonic.trim().split(/\\s+/g).join(\" \");}export function generateMnemonicAndSeed(){return _generateMnemonicAndSeed.apply(this,arguments);}function _generateMnemonicAndSeed(){_generateMnemonicAndSeed=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var bip39,mnemonic,seed;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return import('bip39');case 2:bip39=_context2.sent;mnemonic=bip39.generateMnemonic(256);_context2.next=6;return bip39.mnemonicToSeed(mnemonic);case 6:seed=_context2.sent;return _context2.abrupt(\"return\",{mnemonic:mnemonic,seed:Buffer.from(seed).toString('hex')});case 8:case\"end\":return _context2.stop();}}},_callee2);}));return _generateMnemonicAndSeed.apply(this,arguments);}export function mnemonicToSeed(_x){return _mnemonicToSeed.apply(this,arguments);}function _mnemonicToSeed(){_mnemonicToSeed=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(mnemonic){var bip39,seed;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return import('bip39');case 2:bip39=_context3.sent;if(bip39.validateMnemonic(mnemonic)){_context3.next=5;break;}throw new Error('Invalid seed words');case 5:_context3.next=7;return bip39.mnemonicToSeed(mnemonic);case 7:seed=_context3.sent;return _context3.abrupt(\"return\",Buffer.from(seed).toString('hex'));case 9:case\"end\":return _context3.stop();}}},_callee3);}));return _mnemonicToSeed.apply(this,arguments);}function getExtensionUnlockedMnemonic(){return _getExtensionUnlockedMnemonic.apply(this,arguments);}function _getExtensionUnlockedMnemonic(){_getExtensionUnlockedMnemonic=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(isExtension){_context4.next=2;break;}return _context4.abrupt(\"return\",null);case 2:return _context4.abrupt(\"return\",new Promise(function(resolve){chrome.runtime.sendMessage({channel:'sollet_extension_mnemonic_channel',method:'get'},resolve);}));case 3:case\"end\":return _context4.stop();}}},_callee4);}));return _getExtensionUnlockedMnemonic.apply(this,arguments);}var EMPTY_MNEMONIC={mnemonic:null,seed:null,importsEncryptionKey:null,derivationPath:null};var unlockedMnemonicAndSeed=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var unlockedExpiration,stored;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:unlockedExpiration=localStorage.getItem('unlockedExpiration');// Left here to clean up stored mnemonics from previous method\nif(unlockedExpiration&&Number(unlockedExpiration)<Date.now()){localStorage.removeItem('unlocked');localStorage.removeItem('unlockedExpiration');}_context.t0=JSON;_context.next=5;return getExtensionUnlockedMnemonic();case 5:_context.t3=_context.sent;if(_context.t3){_context.next=8;break;}_context.t3=sessionStorage.getItem('unlocked');case 8:_context.t2=_context.t3;if(_context.t2){_context.next=11;break;}_context.t2=localStorage.getItem('unlocked');case 11:_context.t1=_context.t2;if(_context.t1){_context.next=14;break;}_context.t1='null';case 14:_context.t4=_context.t1;stored=_context.t0.parse.call(_context.t0,_context.t4);if(!(stored===null)){_context.next=18;break;}return _context.abrupt(\"return\",EMPTY_MNEMONIC);case 18:return _context.abrupt(\"return\",_objectSpread({importsEncryptionKey:deriveImportsEncryptionKey(stored.seed)},stored));case 19:case\"end\":return _context.stop();}}},_callee);}))();export var walletSeedChanged=new EventEmitter();export function getUnlockedMnemonicAndSeed(){return unlockedMnemonicAndSeed;}// returns [mnemonic, loading]\nexport function useUnlockedMnemonicAndSeed(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),currentUnlockedMnemonic=_useState2[0],setCurrentUnlockedMnemonic=_useState2[1];useEffect(function(){walletSeedChanged.addListener('change',setCurrentUnlockedMnemonic);unlockedMnemonicAndSeed.then(setCurrentUnlockedMnemonic);return function(){walletSeedChanged.removeListener('change',setCurrentUnlockedMnemonic);};},[]);return!currentUnlockedMnemonic?[EMPTY_MNEMONIC,true]:[currentUnlockedMnemonic,false];}export function useHasLockedMnemonicAndSeed(){var _useUnlockedMnemonicA=useUnlockedMnemonicAndSeed(),_useUnlockedMnemonicA2=_slicedToArray(_useUnlockedMnemonicA,2),unlockedMnemonic=_useUnlockedMnemonicA2[0],loading=_useUnlockedMnemonicA2[1];return[!unlockedMnemonic.seed&&!!localStorage.getItem('locked'),loading];}function setUnlockedMnemonicAndSeed(mnemonic,seed,importsEncryptionKey,derivationPath){var data={mnemonic:mnemonic,seed:seed,importsEncryptionKey:importsEncryptionKey,derivationPath:derivationPath};unlockedMnemonicAndSeed=Promise.resolve(data);walletSeedChanged.emit('change',data);}export function storeMnemonicAndSeed(_x2,_x3,_x4,_x5){return _storeMnemonicAndSeed.apply(this,arguments);}function _storeMnemonicAndSeed(){_storeMnemonicAndSeed=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(mnemonic,seed,password,derivationPath){var plaintext,salt,kdf,iterations,digest,key,nonce,encrypted,importsEncryptionKey;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:plaintext=JSON.stringify({mnemonic:mnemonic,seed:seed,derivationPath:derivationPath});if(!password){_context5.next=15;break;}salt=randomBytes(16);kdf='pbkdf2';iterations=100000;digest='sha256';_context5.next=8;return deriveEncryptionKey(password,salt,iterations,digest);case 8:key=_context5.sent;nonce=randomBytes(secretbox.nonceLength);encrypted=secretbox(Buffer.from(plaintext),nonce,key);localStorage.setItem('locked',JSON.stringify({encrypted:bs58.encode(encrypted),nonce:bs58.encode(nonce),kdf:kdf,salt:bs58.encode(salt),iterations:iterations,digest:digest}));localStorage.removeItem('unlocked');_context5.next=17;break;case 15:localStorage.setItem('unlocked',plaintext);localStorage.removeItem('locked');case 17:sessionStorage.removeItem('unlocked');if(isExtension){chrome.runtime.sendMessage({channel:'sollet_extension_mnemonic_channel',method:'set',data:''});}importsEncryptionKey=deriveImportsEncryptionKey(seed);setUnlockedMnemonicAndSeed(mnemonic,seed,importsEncryptionKey,derivationPath);case 21:case\"end\":return _context5.stop();}}},_callee5);}));return _storeMnemonicAndSeed.apply(this,arguments);}export function loadMnemonicAndSeed(_x6,_x7){return _loadMnemonicAndSeed.apply(this,arguments);}function _loadMnemonicAndSeed(){_loadMnemonicAndSeed=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(password,stayLoggedIn){var _JSON$parse,encodedEncrypted,encodedNonce,encodedSalt,iterations,digest,encrypted,nonce,salt,key,plaintext,decodedPlaintext,_JSON$parse2,mnemonic,seed,derivationPath,importsEncryptionKey;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_JSON$parse=JSON.parse(localStorage.getItem('locked')),encodedEncrypted=_JSON$parse.encrypted,encodedNonce=_JSON$parse.nonce,encodedSalt=_JSON$parse.salt,iterations=_JSON$parse.iterations,digest=_JSON$parse.digest;encrypted=bs58.decode(encodedEncrypted);nonce=bs58.decode(encodedNonce);salt=bs58.decode(encodedSalt);_context6.next=6;return deriveEncryptionKey(password,salt,iterations,digest);case 6:key=_context6.sent;plaintext=secretbox.open(encrypted,nonce,key);if(plaintext){_context6.next=10;break;}throw new Error('Incorrect password');case 10:decodedPlaintext=Buffer.from(plaintext).toString();_JSON$parse2=JSON.parse(decodedPlaintext),mnemonic=_JSON$parse2.mnemonic,seed=_JSON$parse2.seed,derivationPath=_JSON$parse2.derivationPath;if(stayLoggedIn){if(isExtension){chrome.runtime.sendMessage({channel:'sollet_extension_mnemonic_channel',method:'set',data:decodedPlaintext});}else{sessionStorage.setItem('unlocked',decodedPlaintext);}}importsEncryptionKey=deriveImportsEncryptionKey(seed);setUnlockedMnemonicAndSeed(mnemonic,seed,importsEncryptionKey,derivationPath);return _context6.abrupt(\"return\",{mnemonic:mnemonic,seed:seed,derivationPath:derivationPath});case 16:case\"end\":return _context6.stop();}}},_callee6);}));return _loadMnemonicAndSeed.apply(this,arguments);}function deriveEncryptionKey(_x8,_x9,_x10,_x11){return _deriveEncryptionKey.apply(this,arguments);}function _deriveEncryptionKey(){_deriveEncryptionKey=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(password,salt,iterations,digest){return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:return _context7.abrupt(\"return\",new Promise(function(resolve,reject){return pbkdf2(password,salt,iterations,secretbox.keyLength,digest,function(err,key){return err?reject(err):resolve(key);});}));case 1:case\"end\":return _context7.stop();}}},_callee7);}));return _deriveEncryptionKey.apply(this,arguments);}export function lockWallet(){setUnlockedMnemonicAndSeed(null,null,null,null);}// Returns the 32 byte key used to encrypt imported private keys.\nfunction deriveImportsEncryptionKey(seed){// SLIP16 derivation path.\nreturn bip32.fromSeed(Buffer.from(seed,'hex')).derivePath(\"m/10016'/0\").privateKey;}export function forgetWallet(){localStorage.clear();sessionStorage.removeItem('unlocked');if(isExtension){chrome.runtime.sendMessage({channel:'sollet_extension_mnemonic_channel',method:'set',data:''});}unlockedMnemonicAndSeed={mnemonic:null,seed:null,importsEncryptionKey:null};walletSeedChanged.emit('change',unlockedMnemonicAndSeed);if(isExtension){// Must use wrapper function for window.location.reload\nchrome.storage.local.clear(function(){return window.location.reload();});}else{window.location.reload();}}","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/src/utils/wallet-seed.js"],"names":["pbkdf2","randomBytes","secretbox","bip32","bs58","EventEmitter","isExtension","useEffect","useState","normalizeMnemonic","mnemonic","trim","split","join","generateMnemonicAndSeed","bip39","generateMnemonic","mnemonicToSeed","seed","Buffer","from","toString","validateMnemonic","Error","getExtensionUnlockedMnemonic","Promise","resolve","chrome","runtime","sendMessage","channel","method","EMPTY_MNEMONIC","importsEncryptionKey","derivationPath","unlockedMnemonicAndSeed","unlockedExpiration","localStorage","getItem","Number","Date","now","removeItem","JSON","sessionStorage","stored","parse","deriveImportsEncryptionKey","walletSeedChanged","getUnlockedMnemonicAndSeed","useUnlockedMnemonicAndSeed","currentUnlockedMnemonic","setCurrentUnlockedMnemonic","addListener","then","removeListener","useHasLockedMnemonicAndSeed","unlockedMnemonic","loading","setUnlockedMnemonicAndSeed","data","emit","storeMnemonicAndSeed","password","plaintext","stringify","salt","kdf","iterations","digest","deriveEncryptionKey","key","nonce","nonceLength","encrypted","setItem","encode","loadMnemonicAndSeed","stayLoggedIn","encodedEncrypted","encodedNonce","encodedSalt","decode","open","decodedPlaintext","reject","keyLength","err","lockWallet","fromSeed","derivePath","privateKey","forgetWallet","clear","storage","local","window","location","reload"],"mappings":"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","sourcesContent":["import { pbkdf2 } from 'crypto';\nimport { randomBytes, secretbox } from 'tweetnacl';\nimport * as bip32 from 'bip32';\nimport bs58 from 'bs58';\nimport { EventEmitter } from 'events';\nimport { isExtension } from './utils';\nimport { useEffect, useState } from 'react';\n\nexport function normalizeMnemonic(mnemonic) {\n  return mnemonic.trim().split(/\\s+/g).join(\" \");\n}\n\nexport async function generateMnemonicAndSeed() {\n  const bip39 = await import('bip39');\n  const mnemonic = bip39.generateMnemonic(256);\n  const seed = await bip39.mnemonicToSeed(mnemonic);\n  return { mnemonic, seed: Buffer.from(seed).toString('hex') };\n}\n\nexport async function mnemonicToSeed(mnemonic) {\n  const bip39 = await import('bip39');\n  if (!bip39.validateMnemonic(mnemonic)) {\n    throw new Error('Invalid seed words');\n  }\n  const seed = await bip39.mnemonicToSeed(mnemonic);\n  return Buffer.from(seed).toString('hex');\n}\n\nasync function getExtensionUnlockedMnemonic() {\n  if (!isExtension) {\n    return null;\n  }\n\n  return new Promise((resolve) => {\n    chrome.runtime.sendMessage({\n      channel: 'sollet_extension_mnemonic_channel',\n      method: 'get',\n    }, resolve);\n  })\n}\n\nconst EMPTY_MNEMONIC = {\n  mnemonic: null,\n  seed: null,\n  importsEncryptionKey: null,\n  derivationPath: null,\n};\n\nlet unlockedMnemonicAndSeed = (async () => {\n  const unlockedExpiration = localStorage.getItem('unlockedExpiration');\n  // Left here to clean up stored mnemonics from previous method\n  if (unlockedExpiration && Number(unlockedExpiration) < Date.now()) {\n    localStorage.removeItem('unlocked');\n    localStorage.removeItem('unlockedExpiration');\n  }\n  const stored = JSON.parse(\n    (await getExtensionUnlockedMnemonic()) ||\n    sessionStorage.getItem('unlocked') ||\n      localStorage.getItem('unlocked') ||\n      'null',\n  );\n  if (stored === null) {\n    return EMPTY_MNEMONIC;\n  }\n  return {\n    importsEncryptionKey: deriveImportsEncryptionKey(stored.seed),\n    ...stored,\n  };\n})();\n\nexport const walletSeedChanged = new EventEmitter();\n\nexport function getUnlockedMnemonicAndSeed() {\n  return unlockedMnemonicAndSeed;\n}\n\n// returns [mnemonic, loading]\nexport function useUnlockedMnemonicAndSeed() {\n  const [currentUnlockedMnemonic, setCurrentUnlockedMnemonic] = useState(null);\n  \n  useEffect(() => {\n    walletSeedChanged.addListener('change', setCurrentUnlockedMnemonic);\n    unlockedMnemonicAndSeed.then(setCurrentUnlockedMnemonic);\n    return () => {\n      walletSeedChanged.removeListener('change', setCurrentUnlockedMnemonic);\n    }\n  }, []);\n\n  return !currentUnlockedMnemonic\n    ? [EMPTY_MNEMONIC, true]\n    : [currentUnlockedMnemonic, false];\n}\n\nexport function useHasLockedMnemonicAndSeed() {\n  const [unlockedMnemonic, loading] = useUnlockedMnemonicAndSeed();\n\n  return [!unlockedMnemonic.seed && !!localStorage.getItem('locked'), loading];\n}\n\nfunction setUnlockedMnemonicAndSeed(\n  mnemonic,\n  seed,\n  importsEncryptionKey,\n  derivationPath,\n) {\n  const data = {\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n  };\n  unlockedMnemonicAndSeed = Promise.resolve(data);\n  walletSeedChanged.emit('change', data);\n}\n\nexport async function storeMnemonicAndSeed(\n  mnemonic,\n  seed,\n  password,\n  derivationPath,\n) {\n  const plaintext = JSON.stringify({ mnemonic, seed, derivationPath });\n  if (password) {\n    const salt = randomBytes(16);\n    const kdf = 'pbkdf2';\n    const iterations = 100000;\n    const digest = 'sha256';\n    const key = await deriveEncryptionKey(password, salt, iterations, digest);\n    const nonce = randomBytes(secretbox.nonceLength);\n    const encrypted = secretbox(Buffer.from(plaintext), nonce, key);\n    localStorage.setItem(\n      'locked',\n      JSON.stringify({\n        encrypted: bs58.encode(encrypted),\n        nonce: bs58.encode(nonce),\n        kdf,\n        salt: bs58.encode(salt),\n        iterations,\n        digest,\n      }),\n    );\n    localStorage.removeItem('unlocked');\n  } else {\n    localStorage.setItem('unlocked', plaintext);\n    localStorage.removeItem('locked');\n  }\n  sessionStorage.removeItem('unlocked');\n  if (isExtension) {\n    chrome.runtime.sendMessage({\n      channel: 'sollet_extension_mnemonic_channel',\n      method: 'set',\n      data: '',\n    });\n  }\n  const importsEncryptionKey = deriveImportsEncryptionKey(seed);\n  setUnlockedMnemonicAndSeed(\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n  );\n}\n\nexport async function loadMnemonicAndSeed(password, stayLoggedIn) {\n  const {\n    encrypted: encodedEncrypted,\n    nonce: encodedNonce,\n    salt: encodedSalt,\n    iterations,\n    digest,\n  } = JSON.parse(localStorage.getItem('locked'));\n  const encrypted = bs58.decode(encodedEncrypted);\n  const nonce = bs58.decode(encodedNonce);\n  const salt = bs58.decode(encodedSalt);\n  const key = await deriveEncryptionKey(password, salt, iterations, digest);\n  const plaintext = secretbox.open(encrypted, nonce, key);\n  if (!plaintext) {\n    throw new Error('Incorrect password');\n  }\n  const decodedPlaintext = Buffer.from(plaintext).toString();\n  const { mnemonic, seed, derivationPath } = JSON.parse(decodedPlaintext);\n  if (stayLoggedIn) {\n    if (isExtension) {\n      chrome.runtime.sendMessage({\n        channel: 'sollet_extension_mnemonic_channel',\n        method: 'set',\n        data: decodedPlaintext,\n      });\n    } else {\n      sessionStorage.setItem('unlocked', decodedPlaintext);\n    }\n  }\n  const importsEncryptionKey = deriveImportsEncryptionKey(seed);\n  setUnlockedMnemonicAndSeed(\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n  );\n  return { mnemonic, seed, derivationPath };\n}\n\nasync function deriveEncryptionKey(password, salt, iterations, digest) {\n  return new Promise((resolve, reject) =>\n    pbkdf2(\n      password,\n      salt,\n      iterations,\n      secretbox.keyLength,\n      digest,\n      (err, key) => (err ? reject(err) : resolve(key)),\n    ),\n  );\n}\n\nexport function lockWallet() {\n  setUnlockedMnemonicAndSeed(null, null, null, null);\n}\n\n// Returns the 32 byte key used to encrypt imported private keys.\nfunction deriveImportsEncryptionKey(seed) {\n  // SLIP16 derivation path.\n  return bip32.fromSeed(Buffer.from(seed, 'hex')).derivePath(\"m/10016'/0\")\n    .privateKey;\n}\n\nexport function forgetWallet() {\n  localStorage.clear();\n  sessionStorage.removeItem('unlocked');\n  if (isExtension) {\n    chrome.runtime.sendMessage({\n      channel: 'sollet_extension_mnemonic_channel',\n      method: 'set',\n      data: '',\n    });\n  }\n  unlockedMnemonicAndSeed = {\n    mnemonic: null,\n    seed: null,\n    importsEncryptionKey: null,\n  };\n  walletSeedChanged.emit('change', unlockedMnemonicAndSeed);\n  if (isExtension) {\n    // Must use wrapper function for window.location.reload\n    chrome.storage.local.clear(() => window.location.reload());\n  } else {\n    window.location.reload();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}