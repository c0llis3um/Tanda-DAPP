{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import{jsx as _jsx}from\"react/jsx-runtime\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import Web3 from'web3';import ERC20_ABI from'./erc20-abi.json';import SWAP_ABI from'./swap-abi.json';import Button from'@material-ui/core/Button';import{useCallAsync}from'../notifications';import{isExtension}from'../utils';var web3=new Web3(window.ethereum);// Change to use estimated gas limit\nvar SUGGESTED_GAS_LIMIT=200000;export function useEthAccount(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),account=_useState2[0],setAccount=_useState2[1];useEffect(function(){if(!window.ethereum){return;}var onChange=function onChange(accounts){return setAccount(accounts.length>0?accounts[0]:null);};window.ethereum.request({method:'eth_accounts'}).then(onChange);window.ethereum.on('accountsChanged',onChange);return function(){return window.ethereum.removeListener('accountsChanged',onChange);};},[]);return account;}export function getErc20Balance(_x,_x2){return _getErc20Balance.apply(this,arguments);}function _getErc20Balance(){_getErc20Balance=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account,erc20Address){var erc20,_yield$Promise$all,_yield$Promise$all2,value,decimals;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(erc20Address){_context.next=7;break;}_context.t0=parseInt;_context.next=4;return web3.eth.getBalance(account);case 4:_context.t1=_context.sent;_context.t2=(0,_context.t0)(_context.t1);return _context.abrupt(\"return\",_context.t2/1e18);case 7:erc20=new web3.eth.Contract(ERC20_ABI,erc20Address);_context.next=10;return Promise.all([erc20.methods.balanceOf(account).call(),erc20.methods.decimals().call()]);case 10:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);value=_yield$Promise$all2[0];decimals=_yield$Promise$all2[1];return _context.abrupt(\"return\",parseInt(value,10)/Math.pow(10,parseInt(decimals,10)));case 15:case\"end\":return _context.stop();}}},_callee);}));return _getErc20Balance.apply(this,arguments);}export function estimateErc20SwapFees(_x3){return _estimateErc20SwapFees.apply(this,arguments);}function _estimateErc20SwapFees(){_estimateErc20SwapFees=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref){var erc20Address,swapAddress,ethAccount,erc20,decimals,approveAmount,approveEstimatedGas,swapEstimatedGas,gasPrice;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:erc20Address=_ref.erc20Address,swapAddress=_ref.swapAddress,ethAccount=_ref.ethAccount;if(erc20Address){_context2.next=3;break;}return _context2.abrupt(\"return\",estimateEthSwapFees({swapAddress:swapAddress}));case 3:erc20=new web3.eth.Contract(ERC20_ABI,erc20Address);_context2.t0=parseInt;_context2.next=7;return erc20.methods.decimals().call();case 7:_context2.t1=_context2.sent;decimals=(0,_context2.t0)(_context2.t1,10);approveAmount=addDecimals('100000000',decimals);_context2.next=12;return erc20.methods.approve(swapAddress,approveAmount).estimateGas({from:ethAccount});case 12:approveEstimatedGas=_context2.sent;// Account for Metamask over-estimation\napproveEstimatedGas*=1.5;// Use estimated gas limit for now\nswapEstimatedGas=SUGGESTED_GAS_LIMIT;_context2.next=17;return web3.eth.getGasPrice();case 17:_context2.t2=_context2.sent;gasPrice=_context2.t2*1e-18;return _context2.abrupt(\"return\",[approveEstimatedGas*gasPrice,swapEstimatedGas*gasPrice]);case 20:case\"end\":return _context2.stop();}}},_callee2);}));return _estimateErc20SwapFees.apply(this,arguments);}export function estimateEthSwapFees(){return _estimateEthSwapFees.apply(this,arguments);}function _estimateEthSwapFees(){_estimateEthSwapFees=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var estimatedGas,gasPrice;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:estimatedGas=SUGGESTED_GAS_LIMIT;_context3.next=3;return web3.eth.getGasPrice();case 3:_context3.t0=_context3.sent;gasPrice=_context3.t0*1e-18;return _context3.abrupt(\"return\",estimatedGas*gasPrice);case 6:case\"end\":return _context3.stop();}}},_callee3);}));return _estimateEthSwapFees.apply(this,arguments);}export function swapErc20ToSpl(_x4){return _swapErc20ToSpl.apply(this,arguments);}function _swapErc20ToSpl(){_swapErc20ToSpl=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref2){var ethAccount,erc20Address,swapAddress,destination,amount,onStatusChange,erc20,swap,decimals,encodedAmount,approveTx,swapTx,swapTxid;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:ethAccount=_ref2.ethAccount,erc20Address=_ref2.erc20Address,swapAddress=_ref2.swapAddress,destination=_ref2.destination,amount=_ref2.amount,onStatusChange=_ref2.onStatusChange;if(erc20Address){_context4.next=3;break;}return _context4.abrupt(\"return\",swapEthToSpl({ethAccount:ethAccount,swapAddress:swapAddress,destination:destination,amount:amount,onStatusChange:onStatusChange}));case 3:erc20=new web3.eth.Contract(ERC20_ABI,erc20Address);swap=new web3.eth.Contract(SWAP_ABI,swapAddress);_context4.t0=parseInt;_context4.next=8;return erc20.methods.decimals().call();case 8:_context4.t1=_context4.sent;decimals=(0,_context4.t0)(_context4.t1,10);encodedAmount=addDecimals(amount,decimals);approveTx=erc20.methods.approve(swapAddress,encodedAmount).send({from:ethAccount});_context4.next=14;return waitForTxid(approveTx);case 14:onStatusChange({step:1});swapTx=swap.methods.swapErc20(erc20Address,destination,encodedAmount).send({from:ethAccount,gasLimit:SUGGESTED_GAS_LIMIT});_context4.next=18;return waitForTxid(swapTx);case 18:swapTxid=_context4.sent;onStatusChange({step:2,txid:swapTxid,confirms:0});_context4.next=22;return Promise.all([approveTx,swapTx,waitForConfirms(swapTx,onStatusChange)]);case 22:onStatusChange({step:3});case 23:case\"end\":return _context4.stop();}}},_callee4);}));return _swapErc20ToSpl.apply(this,arguments);}export function swapEthToSpl(_x5){return _swapEthToSpl.apply(this,arguments);}function _swapEthToSpl(){_swapEthToSpl=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref3){var ethAccount,swapAddress,destination,amount,onStatusChange,swap,encodedAmount,swapTx,swapTxid;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:ethAccount=_ref3.ethAccount,swapAddress=_ref3.swapAddress,destination=_ref3.destination,amount=_ref3.amount,onStatusChange=_ref3.onStatusChange;swap=new web3.eth.Contract(SWAP_ABI,swapAddress);encodedAmount=addDecimals(amount,18);swapTx=swap.methods.swapEth(destination).send({from:ethAccount,value:encodedAmount});_context5.next=6;return waitForTxid(swapTx);case 6:swapTxid=_context5.sent;onStatusChange({step:2,txid:swapTxid,confirms:0});_context5.next=10;return Promise.all([swapTx,waitForConfirms(swapTx,onStatusChange)]);case 10:onStatusChange({step:3});case 11:case\"end\":return _context5.stop();}}},_callee5);}));return _swapEthToSpl.apply(this,arguments);}function addDecimals(str,decimals){if(!/^\\d*\\.?\\d*$/.test(str)){throw new Error('Invalid number');}if(!str.includes('.')){str+='.';}var _str$split=str.split('.'),_str$split2=_slicedToArray(_str$split,2),intStr=_str$split2[0],fractionStr=_str$split2[1];if(fractionStr.length>decimals){fractionStr=fractionStr.slice(0,decimals);}else{fractionStr+='0'.repeat(decimals-fractionStr.length);}return(intStr+fractionStr).replace(/^0+/,'')||'0';}var pendingNonces=new Set();export function withdrawEth(_x6,_x7,_x8){return _withdrawEth.apply(this,arguments);}function _withdrawEth(){_withdrawEth=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(from,withdrawal,callAsync){var _withdrawal$txData,params,signature,swap,method,nonce;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_withdrawal$txData=withdrawal.txData,params=_withdrawal$txData.params,signature=_withdrawal$txData.signature;swap=new web3.eth.Contract(SWAP_ABI,params[1]);if(!(params[0]==='withdrawErc20')){_context6.next=7;break;}method=swap.methods.withdrawErc20(params[2],params[3],params[4],params[5],signature);nonce=params[5];_context6.next=13;break;case 7:if(!(params[0]==='withdrawEth')){_context6.next=12;break;}method=swap.methods.withdrawEth(params[2],params[3],params[4],signature);nonce=params[4];_context6.next=13;break;case 12:return _context6.abrupt(\"return\");case 13:if(!pendingNonces.has(nonce)){_context6.next=15;break;}return _context6.abrupt(\"return\");case 15:_context6.prev=15;_context6.next=18;return method.estimateGas();case 18:_context6.next=23;break;case 20:_context6.prev=20;_context6.t0=_context6[\"catch\"](15);return _context6.abrupt(\"return\");case 23:pendingNonces.add(nonce);_context6.next=26;return callAsync(method.send({from:from,gasLimit:SUGGESTED_GAS_LIMIT}),{progressMessage:\"Completing \".concat(withdrawal.coin.ticker,\" transfer...\")});case 26:pendingNonces.delete(nonce);case 27:case\"end\":return _context6.stop();}}},_callee6,null,[[15,20]]);}));return _withdrawEth.apply(this,arguments);}function waitForTxid(tx){return new Promise(function(resolve,reject){tx.once('transactionHash',resolve).catch(reject);});}function waitForConfirms(tx,onStatusChange){return new Promise(function(resolve,reject){var resolved=false;tx.on('confirmation',function(confirms,receipt){if(!resolved){onStatusChange({confirms:confirms+1});if(!receipt.status){reject('Transaction failed');resolved=true;}else if(confirms>=11){resolve();resolved=true;}}});});}export function ConnectToMetamaskButton(){var callAsync=useCallAsync();if(!window.ethereum){return/*#__PURE__*/_jsx(Button,{color:\"primary\",variant:\"outlined\",component:\"a\",href:isExtension?'https://sollet.io':'https://metamask.io/',target:\"_blank\",rel:\"noopener\",children:isExtension?'Open sollet.io':'Connect to MetaMask'});}function connect(){callAsync(window.ethereum.request({method:'eth_requestAccounts'}),{progressMessage:'Connecting to MetaMask...',successMessage:'Connected to MetaMask'});}return/*#__PURE__*/_jsx(Button,{color:\"primary\",variant:\"outlined\",onClick:connect,children:\"Connect to MetaMask\"});}","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/Tanda-DAPP/src/utils/swap/eth.js"],"names":["React","useEffect","useState","Web3","ERC20_ABI","SWAP_ABI","Button","useCallAsync","isExtension","web3","window","ethereum","SUGGESTED_GAS_LIMIT","useEthAccount","account","setAccount","onChange","accounts","length","request","method","then","on","removeListener","getErc20Balance","erc20Address","parseInt","eth","getBalance","erc20","Contract","Promise","all","methods","balanceOf","call","decimals","value","estimateErc20SwapFees","swapAddress","ethAccount","estimateEthSwapFees","approveAmount","addDecimals","approve","estimateGas","from","approveEstimatedGas","swapEstimatedGas","getGasPrice","gasPrice","estimatedGas","swapErc20ToSpl","destination","amount","onStatusChange","swapEthToSpl","swap","encodedAmount","approveTx","send","waitForTxid","step","swapTx","swapErc20","gasLimit","swapTxid","txid","confirms","waitForConfirms","swapEth","str","test","Error","includes","split","intStr","fractionStr","slice","repeat","replace","pendingNonces","Set","withdrawEth","withdrawal","callAsync","txData","params","signature","withdrawErc20","nonce","has","add","progressMessage","coin","ticker","delete","tx","resolve","reject","once","catch","resolved","receipt","status","ConnectToMetamaskButton","connect","successMessage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport ERC20_ABI from './erc20-abi.json';\nimport SWAP_ABI from './swap-abi.json';\nimport Button from '@material-ui/core/Button';\nimport { useCallAsync } from '../notifications';\nimport { isExtension } from '../utils';\n\nconst web3 = new Web3(window.ethereum);\n// Change to use estimated gas limit\nconst SUGGESTED_GAS_LIMIT = 200000;\n\nexport function useEthAccount() {\n  const [account, setAccount] = useState(null);\n\n  useEffect(() => {\n    if (!window.ethereum) {\n      return;\n    }\n    const onChange = (accounts) =>\n      setAccount(accounts.length > 0 ? accounts[0] : null);\n    window.ethereum.request({ method: 'eth_accounts' }).then(onChange);\n    window.ethereum.on('accountsChanged', onChange);\n    return () => window.ethereum.removeListener('accountsChanged', onChange);\n  }, []);\n\n  return account;\n}\n\nexport async function getErc20Balance(account, erc20Address) {\n  if (!erc20Address) {\n    return parseInt(await web3.eth.getBalance(account)) / 1e18;\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const [value, decimals] = await Promise.all([\n    erc20.methods.balanceOf(account).call(),\n    erc20.methods.decimals().call(),\n  ]);\n  return parseInt(value, 10) / 10 ** parseInt(decimals, 10);\n}\n\nexport async function estimateErc20SwapFees({\n  erc20Address,\n  swapAddress,\n  ethAccount,\n}) {\n  if (!erc20Address) {\n    return estimateEthSwapFees({ swapAddress });\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const decimals = parseInt(await erc20.methods.decimals().call(), 10);\n\n  const approveAmount = addDecimals('100000000', decimals);\n\n  let approveEstimatedGas = await erc20.methods\n    .approve(swapAddress, approveAmount)\n    .estimateGas({ from: ethAccount });\n  // Account for Metamask over-estimation\n  approveEstimatedGas *= 1.5;\n\n  // Use estimated gas limit for now\n  const swapEstimatedGas = SUGGESTED_GAS_LIMIT;\n\n  const gasPrice = (await web3.eth.getGasPrice()) * 1e-18;\n\n  return [approveEstimatedGas * gasPrice, swapEstimatedGas * gasPrice];\n}\n\nexport async function estimateEthSwapFees() {\n  const estimatedGas = SUGGESTED_GAS_LIMIT;\n\n  const gasPrice = (await web3.eth.getGasPrice()) * 1e-18;\n\n  return estimatedGas * gasPrice;\n}\n\nexport async function swapErc20ToSpl({\n  ethAccount,\n  erc20Address,\n  swapAddress,\n  destination,\n  amount, // string\n  onStatusChange,\n}) {\n  if (!erc20Address) {\n    return swapEthToSpl({\n      ethAccount,\n      swapAddress,\n      destination,\n      amount,\n      onStatusChange,\n    });\n  }\n\n  const erc20 = new web3.eth.Contract(ERC20_ABI, erc20Address);\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\n  const decimals = parseInt(await erc20.methods.decimals().call(), 10);\n\n  const encodedAmount = addDecimals(amount, decimals);\n\n  const approveTx = erc20.methods\n    .approve(swapAddress, encodedAmount)\n    .send({ from: ethAccount });\n  await waitForTxid(approveTx);\n\n  onStatusChange({ step: 1 });\n\n  const swapTx = swap.methods\n    .swapErc20(erc20Address, destination, encodedAmount)\n    .send({ from: ethAccount, gasLimit: SUGGESTED_GAS_LIMIT });\n  const swapTxid = await waitForTxid(swapTx);\n\n  onStatusChange({ step: 2, txid: swapTxid, confirms: 0 });\n\n  await Promise.all([\n    approveTx,\n    swapTx,\n    waitForConfirms(swapTx, onStatusChange),\n  ]);\n\n  onStatusChange({ step: 3 });\n}\n\nexport async function swapEthToSpl({\n  ethAccount,\n  swapAddress,\n  destination,\n  amount,\n  onStatusChange,\n}) {\n  const swap = new web3.eth.Contract(SWAP_ABI, swapAddress);\n\n  const encodedAmount = addDecimals(amount, 18);\n  const swapTx = swap.methods\n    .swapEth(destination)\n    .send({ from: ethAccount, value: encodedAmount });\n  const swapTxid = await waitForTxid(swapTx);\n\n  onStatusChange({ step: 2, txid: swapTxid, confirms: 0 });\n\n  await Promise.all([swapTx, waitForConfirms(swapTx, onStatusChange)]);\n\n  onStatusChange({ step: 3 });\n}\n\nfunction addDecimals(str, decimals) {\n  if (!/^\\d*\\.?\\d*$/.test(str)) {\n    throw new Error('Invalid number');\n  }\n  if (!str.includes('.')) {\n    str += '.';\n  }\n  let [intStr, fractionStr] = str.split('.');\n  if (fractionStr.length > decimals) {\n    fractionStr = fractionStr.slice(0, decimals);\n  } else {\n    fractionStr += '0'.repeat(decimals - fractionStr.length);\n  }\n  return (intStr + fractionStr).replace(/^0+/, '') || '0';\n}\n\nconst pendingNonces = new Set();\n\nexport async function withdrawEth(from, withdrawal, callAsync) {\n  const { params, signature } = withdrawal.txData;\n  const swap = new web3.eth.Contract(SWAP_ABI, params[1]);\n  let method, nonce;\n  if (params[0] === 'withdrawErc20') {\n    method = swap.methods.withdrawErc20(\n      params[2],\n      params[3],\n      params[4],\n      params[5],\n      signature,\n    );\n    nonce = params[5];\n  } else if (params[0] === 'withdrawEth') {\n    method = swap.methods.withdrawEth(\n      params[2],\n      params[3],\n      params[4],\n      signature,\n    );\n    nonce = params[4];\n  } else {\n    return;\n  }\n  if (pendingNonces.has(nonce)) {\n    return;\n  }\n  try {\n    await method.estimateGas();\n  } catch (e) {\n    return;\n  }\n  pendingNonces.add(nonce);\n  await callAsync(method.send({ from, gasLimit: SUGGESTED_GAS_LIMIT }), {\n    progressMessage: `Completing ${withdrawal.coin.ticker} transfer...`,\n  });\n  pendingNonces.delete(nonce);\n}\n\nfunction waitForTxid(tx) {\n  return new Promise((resolve, reject) => {\n    tx.once('transactionHash', resolve).catch(reject);\n  });\n}\n\nfunction waitForConfirms(tx, onStatusChange) {\n  return new Promise((resolve, reject) => {\n    let resolved = false;\n    tx.on('confirmation', (confirms, receipt) => {\n      if (!resolved) {\n        onStatusChange({ confirms: confirms + 1 });\n        if (!receipt.status) {\n          reject('Transaction failed');\n          resolved = true;\n        } else if (confirms >= 11) {\n          resolve();\n          resolved = true;\n        }\n      }\n    });\n  });\n}\n\nexport function ConnectToMetamaskButton() {\n  const callAsync = useCallAsync();\n\n  if (!window.ethereum) {\n    return (\n      <Button\n        color=\"primary\"\n        variant=\"outlined\"\n        component=\"a\"\n        href={isExtension ? 'https://sollet.io' : 'https://metamask.io/'}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        {isExtension ? 'Open sollet.io' : 'Connect to MetaMask'}\n      </Button>\n    );\n  }\n\n  function connect() {\n    callAsync(\n      window.ethereum.request({\n        method: 'eth_requestAccounts',\n      }),\n      {\n        progressMessage: 'Connecting to MetaMask...',\n        successMessage: 'Connected to MetaMask',\n      },\n    );\n  }\n\n  return (\n    <Button color=\"primary\" variant=\"outlined\" onClick={connect}>\n      Connect to MetaMask\n    </Button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}