{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useEffect}from'react';import CardContent from'@material-ui/core/CardContent';import Warning from'@material-ui/icons/Warning';import{Tooltip,Typography,Divider}from'@material-ui/core';import{useWallet}from'../utils/wallet';function toHex(buffer){return Array.prototype.map.call(buffer,function(x){return('00'+x.toString(16)).slice(-2);}).join('');}export default function SignFormContent(_ref){var origin=_ref.origin,message=_ref.message,messageDisplay=_ref.messageDisplay,buttonRef=_ref.buttonRef;useEffect(function(){// brings window to front when we receive new instructions\n// this needs to be executed from wallet instead of adapter\n// to ensure chrome brings window to front\nwindow.focus();// Scroll to approve button and focus it to enable approve with enter.\n// Keep currentButtonRef in local variable, so the reference can't become\n// invalid until the timeout is over. this was happening to all auto-\n// approvals for unknown reasons.\nvar currentButtonRef=buttonRef.current;if(currentButtonRef){currentButtonRef.scrollIntoView({behavior:'smooth'});setTimeout(function(){return currentButtonRef.focus();},50);}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[buttonRef]);var wallet=useWallet();var messageTxt;switch(messageDisplay){case'utf8':messageTxt=new TextDecoder().decode(message);break;case'hex':messageTxt='0x'+toHex(message);break;case'diffieHellman':messageTxt='Create Diffie-Hellman keys';break;default:throw new Error('Unexpected message type: '+messageDisplay);}var renderAction=function renderAction(){switch(messageDisplay){case'utf8':return\"Sign message with account \".concat(wallet.publicKey);case'hex':return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Tooltip,{title:\"Be especially cautious when signing arbitrary data, you must trust the requester.\",arrow:true,children:/*#__PURE__*/_jsx(Warning,{style:{marginBottom:'-7px'}})}),' ',\"Sign data with account \".concat(wallet.publicKey)]});case'diffieHellman':return\"Create Diffie-Hellman keys\";default:throw new Error('Unexpected message display type: '+messageDisplay);}};return/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"\".concat(origin,\" wants to:\")}),/*#__PURE__*/_jsx(Typography,{variant:\"subtitle1\",style:{fontWeight:'bold'},gutterBottom:true,children:renderAction()}),/*#__PURE__*/_jsx(Divider,{style:{margin:20}}),/*#__PURE__*/_jsx(Typography,{style:{wordBreak:'break-all'},children:messageTxt}),/*#__PURE__*/_jsx(Divider,{style:{margin:20}})]});}","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/src/components/SignFormContent.js"],"names":["React","useEffect","CardContent","Warning","Tooltip","Typography","Divider","useWallet","toHex","buffer","Array","prototype","map","call","x","toString","slice","join","SignFormContent","origin","message","messageDisplay","buttonRef","window","focus","currentButtonRef","current","scrollIntoView","behavior","setTimeout","wallet","messageTxt","TextDecoder","decode","Error","renderAction","publicKey","marginBottom","fontWeight","margin","wordBreak"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Warning from '@material-ui/icons/Warning';\nimport { Tooltip, Typography, Divider } from '@material-ui/core';\nimport { useWallet } from '../utils/wallet';\n\nfunction toHex(buffer) {\n  return Array.prototype.map\n    .call(buffer, (x) => ('00' + x.toString(16)).slice(-2))\n    .join('');\n}\n\nexport default function SignFormContent({\n  origin,\n  message,\n  messageDisplay,\n  buttonRef,\n}) {\n  useEffect(() => {\n    // brings window to front when we receive new instructions\n    // this needs to be executed from wallet instead of adapter\n    // to ensure chrome brings window to front\n    window.focus();\n\n    // Scroll to approve button and focus it to enable approve with enter.\n    // Keep currentButtonRef in local variable, so the reference can't become\n    // invalid until the timeout is over. this was happening to all auto-\n    // approvals for unknown reasons.\n    let currentButtonRef = buttonRef.current;\n    if (currentButtonRef) {\n      currentButtonRef.scrollIntoView({ behavior: 'smooth' });\n      setTimeout(() => currentButtonRef.focus(), 50);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [buttonRef]);\n\n  const wallet = useWallet();\n\n  let messageTxt;\n  switch (messageDisplay) {\n    case 'utf8':\n      messageTxt = new TextDecoder().decode(message);\n      break;\n    case 'hex':\n      messageTxt = '0x' + toHex(message);\n      break;\n    case 'diffieHellman':\n      messageTxt = 'Create Diffie-Hellman keys';\n      break;\n    default:\n      throw new Error('Unexpected message type: ' + messageDisplay);\n  }\n\n  const renderAction = () => {\n    switch (messageDisplay) {\n      case 'utf8':\n        return `Sign message with account ${wallet.publicKey}`;\n      case 'hex':\n        return (\n          <>\n            <Tooltip\n              title=\"Be especially cautious when signing arbitrary data, you must trust the requester.\"\n              arrow\n            >\n              <Warning style={{ marginBottom: '-7px' }} />\n            </Tooltip>{' '}\n            {`Sign data with account ${wallet.publicKey}`}\n          </>\n        );\n      case 'diffieHellman':\n        return `Create Diffie-Hellman keys`;\n      default:\n        throw new Error('Unexpected message display type: ' + messageDisplay);\n    }\n  };\n\n  return (\n    <CardContent>\n      <Typography variant=\"h6\" gutterBottom>\n        {`${origin} wants to:`}\n      </Typography>\n      <Typography\n        variant=\"subtitle1\"\n        style={{ fontWeight: 'bold' }}\n        gutterBottom\n      >\n        {renderAction()}\n      </Typography>\n      <Divider style={{ margin: 20 }} />\n      <Typography style={{ wordBreak: 'break-all' }}>{messageTxt}</Typography>\n      <Divider style={{ margin: 20 }} />\n    </CardContent>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}