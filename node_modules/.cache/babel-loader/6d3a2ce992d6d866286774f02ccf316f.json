{"ast":null,"code":"import _slicedToArray from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{PublicKey}from'@solana/web3.js';import{getTwitterRegistry,getHashedName,getNameAccountKey,NameRegistryState,getFilteredProgramAccounts,NAME_PROGRAM_ID}from'@bonfida/spl-name-service';import{useConnection}from'../connection';import{useWallet}from'../wallet';import BN from'bn.js';import{useAsyncData}from'../fetch-loop';import tuple from'immutable-tuple';// Address of the SOL TLD\nexport var SOL_TLD_AUTHORITY=new PublicKey('58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx');export var PROGRAM_ID=new PublicKey('jCebN34bUfdeUYJT13J1yG16XWQpt5PDx6Mse9GUqhR');export var resolveTwitterHandle=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,twitterHandle){var registry;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return getTwitterRegistry(connection,twitterHandle);case 3:registry=_context.sent;return _context.abrupt(\"return\",registry.owner.toBase58());case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.warn(\"err\");return _context.abrupt(\"return\",undefined);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function resolveTwitterHandle(_x,_x2){return _ref.apply(this,arguments);};}();export var resolveDomainName=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,domainName){var hashedDomainName,inputDomainKey,registry;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getHashedName(domainName);case 2:hashedDomainName=_context2.sent;_context2.next=5;return getNameAccountKey(hashedDomainName,undefined,SOL_TLD_AUTHORITY);case 5:inputDomainKey=_context2.sent;_context2.prev=6;_context2.next=9;return NameRegistryState.retrieve(connection,inputDomainKey);case 9:registry=_context2.sent;return _context2.abrupt(\"return\",registry.owner.toBase58());case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](6);console.warn(_context2.t0);return _context2.abrupt(\"return\",undefined);case 17:case\"end\":return _context2.stop();}}},_callee2,null,[[6,13]]);}));return function resolveDomainName(_x3,_x4){return _ref2.apply(this,arguments);};}();export function findOwnedNameAccountsForUser(_x5,_x6){return _findOwnedNameAccountsForUser.apply(this,arguments);}function _findOwnedNameAccountsForUser(){_findOwnedNameAccountsForUser=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection,userAccount){var filters,accounts;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:filters=[{memcmp:{offset:32,bytes:userAccount.toBase58()}}];_context5.next=3;return getFilteredProgramAccounts(connection,NAME_PROGRAM_ID,filters);case 3:accounts=_context5.sent;return _context5.abrupt(\"return\",accounts.map(function(a){return a.publicKey;}));case 5:case\"end\":return _context5.stop();}}},_callee5);}));return _findOwnedNameAccountsForUser.apply(this,arguments);}export function performReverseLookup(_x7,_x8){return _performReverseLookup.apply(this,arguments);}function _performReverseLookup(){_performReverseLookup=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connection,nameAccount){var _yield$PublicKey$find,_yield$PublicKey$find2,centralState,hashedReverseLookup,reverseLookupAccount,name,nameLength;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return PublicKey.findProgramAddress([PROGRAM_ID.toBuffer()],PROGRAM_ID);case 2:_yield$PublicKey$find=_context6.sent;_yield$PublicKey$find2=_slicedToArray(_yield$PublicKey$find,1);centralState=_yield$PublicKey$find2[0];_context6.next=7;return getHashedName(nameAccount.toBase58());case 7:hashedReverseLookup=_context6.sent;_context6.next=10;return getNameAccountKey(hashedReverseLookup,centralState);case 10:reverseLookupAccount=_context6.sent;_context6.next=13;return NameRegistryState.retrieve(connection,reverseLookupAccount);case 13:name=_context6.sent;if(name.data){_context6.next=16;break;}throw new Error('Could not retrieve name data');case 16:nameLength=new BN(name.data.slice(0,4),'le').toNumber();return _context6.abrupt(\"return\",name.data.slice(4,4+nameLength).toString());case 18:case\"end\":return _context6.stop();}}},_callee6);}));return _performReverseLookup.apply(this,arguments);}export var useUserDomains=function useUserDomains(){var _wallet$publicKey;var wallet=useWallet();var connection=useConnection();var fn=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var domains,names,fn,promises;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return findOwnedNameAccountsForUser(connection,wallet.publicKey);case 2:domains=_context4.sent;names=[];fn=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(d){var name;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return performReverseLookup(connection,d);case 3:name=_context3.sent;names.push({name:name,nameKey:d});_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);console.log(\"Passing account \".concat(d.toBase58(),\" - err \").concat(_context3.t0));case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[0,7]]);}));return function fn(_x9){return _ref4.apply(this,arguments);};}();promises=domains.map(function(d){return fn(d);});_context4.next=8;return Promise.allSettled(promises);case 8:return _context4.abrupt(\"return\",names.sort(function(a,b){return a.name.localeCompare(b.name);}));case 9:case\"end\":return _context4.stop();}}},_callee4);}));return function fn(){return _ref3.apply(this,arguments);};}();return useAsyncData(fn,tuple('useUserDomain',wallet===null||wallet===void 0?void 0:(_wallet$publicKey=wallet.publicKey)===null||_wallet$publicKey===void 0?void 0:_wallet$publicKey.toBase58()));};","map":{"version":3,"sources":["/Users/jalcantara/Desktop/SOL-dev/tanda-wallet-sol/src/utils/name-service/index.ts"],"names":["PublicKey","getTwitterRegistry","getHashedName","getNameAccountKey","NameRegistryState","getFilteredProgramAccounts","NAME_PROGRAM_ID","useConnection","useWallet","BN","useAsyncData","tuple","SOL_TLD_AUTHORITY","PROGRAM_ID","resolveTwitterHandle","connection","twitterHandle","registry","owner","toBase58","console","warn","undefined","resolveDomainName","domainName","hashedDomainName","inputDomainKey","retrieve","findOwnedNameAccountsForUser","userAccount","filters","memcmp","offset","bytes","accounts","map","a","publicKey","performReverseLookup","nameAccount","findProgramAddress","toBuffer","centralState","hashedReverseLookup","reverseLookupAccount","name","data","Error","nameLength","slice","toNumber","toString","useUserDomains","wallet","fn","domains","names","d","push","nameKey","log","promises","Promise","allSettled","sort","b","localeCompare"],"mappings":"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","sourcesContent":["import { PublicKey, Connection } from '@solana/web3.js';\nimport {\n  getTwitterRegistry,\n  getHashedName,\n  getNameAccountKey,\n  NameRegistryState,\n  getFilteredProgramAccounts,\n  NAME_PROGRAM_ID,\n} from '@bonfida/spl-name-service';\nimport { useConnection } from '../connection';\nimport { useWallet } from '../wallet';\nimport BN from 'bn.js';\nimport { useAsyncData } from '../fetch-loop';\nimport tuple from 'immutable-tuple';\n\n// Address of the SOL TLD\nexport const SOL_TLD_AUTHORITY = new PublicKey(\n  '58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx',\n);\n\nexport const PROGRAM_ID = new PublicKey(\n  'jCebN34bUfdeUYJT13J1yG16XWQpt5PDx6Mse9GUqhR',\n);\n\nexport const resolveTwitterHandle = async (\n  connection: Connection,\n  twitterHandle: string,\n): Promise<string | undefined> => {\n  try {\n    const registry = await getTwitterRegistry(connection, twitterHandle);\n    return registry.owner.toBase58();\n  } catch (err) {\n    console.warn(`err`);\n    return undefined;\n  }\n};\n\nexport const resolveDomainName = async (\n  connection: Connection,\n  domainName: string,\n): Promise<string | undefined> => {\n  let hashedDomainName = await getHashedName(domainName);\n  let inputDomainKey = await getNameAccountKey(\n    hashedDomainName,\n    undefined,\n    SOL_TLD_AUTHORITY,\n  );\n  try {\n    const registry = await NameRegistryState.retrieve(\n      connection,\n      inputDomainKey,\n    );\n    return registry.owner.toBase58();\n  } catch (err) {\n    console.warn(err);\n    return undefined;\n  }\n};\n\nexport async function findOwnedNameAccountsForUser(\n  connection: Connection,\n  userAccount: PublicKey,\n): Promise<PublicKey[]> {\n  const filters = [\n    {\n      memcmp: {\n        offset: 32,\n        bytes: userAccount.toBase58(),\n      },\n    },\n  ];\n  const accounts = await getFilteredProgramAccounts(\n    connection,\n    NAME_PROGRAM_ID,\n    filters,\n  );\n  return accounts.map((a) => a.publicKey);\n}\n\nexport async function performReverseLookup(\n  connection: Connection,\n  nameAccount: PublicKey,\n): Promise<string> {\n  let [centralState] = await PublicKey.findProgramAddress(\n    [PROGRAM_ID.toBuffer()],\n    PROGRAM_ID,\n  );\n  let hashedReverseLookup = await getHashedName(nameAccount.toBase58());\n  let reverseLookupAccount = await getNameAccountKey(\n    hashedReverseLookup,\n    centralState,\n  );\n\n  let name = await NameRegistryState.retrieve(connection, reverseLookupAccount);\n  if (!name.data) {\n    throw new Error('Could not retrieve name data');\n  }\n  let nameLength = new BN(name.data.slice(0, 4), 'le').toNumber();\n  return name.data.slice(4, 4 + nameLength).toString();\n}\n\nexport const useUserDomains = () => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const fn = async () => {\n    const domains = await findOwnedNameAccountsForUser(\n      connection,\n      wallet.publicKey,\n    );\n    let names: { name: string; nameKey: PublicKey }[] = [];\n    const fn = async (d) => {\n      try {\n        const name = await performReverseLookup(connection, d);\n        names.push({ name: name, nameKey: d });\n      } catch (err) {\n        console.log(`Passing account ${d.toBase58()} - err ${err}`);\n      }\n    };\n    const promises = domains.map((d) => fn(d));\n    await Promise.allSettled(promises);\n    return names.sort((a, b) => {\n      return a.name.localeCompare(b.name);\n    });\n  };\n  return useAsyncData(\n    fn,\n    tuple('useUserDomain', wallet?.publicKey?.toBase58()),\n  );\n};\n"]},"metadata":{},"sourceType":"module"}