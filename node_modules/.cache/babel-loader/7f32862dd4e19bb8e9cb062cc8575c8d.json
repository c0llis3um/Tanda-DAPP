{"ast":null,"code":"import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nvar _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\n\nvar workspace = new Proxy({}, {\n  get: function get(workspaceCache, programName) {\n    var find = require(\"find\");\n\n    var fs = require(\"fs\");\n\n    var process = require(\"process\");\n\n    if (typeof window !== \"undefined\") {\n      // Workspaces aren't available in the browser, yet.\n      return undefined;\n    }\n\n    if (!_populatedWorkspace) {\n      var path = require(\"path\");\n\n      var projectRoot = process.cwd();\n\n      while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n        var parentDir = path.dirname(projectRoot);\n\n        if (parentDir === projectRoot) {\n          projectRoot = undefined;\n        }\n\n        projectRoot = parentDir;\n      }\n\n      if (projectRoot === undefined) {\n        throw new Error(\"Could not find workspace root.\");\n      }\n\n      var idlMap = new Map();\n      find.fileSync(/target\\/idl\\/.*\\.json/, projectRoot).reduce(function (programs, path) {\n        var idlStr = fs.readFileSync(path);\n        var idl = JSON.parse(idlStr);\n        idlMap.set(idl.name, idl);\n        var name = camelCase(idl.name, {\n          pascalCase: true\n        });\n\n        if (idl.metadata && idl.metadata.address) {\n          programs[name] = new Program(idl, new PublicKey(idl.metadata.address));\n        }\n\n        return programs;\n      }, workspaceCache); // Override the workspace programs if the user put them in the config.\n\n      var anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n      var clusterId = anchorToml.provider.cluster;\n\n      if (anchorToml.clusters && anchorToml.clusters[clusterId]) {\n        attachWorkspaceOverride(workspaceCache, anchorToml.clusters[clusterId], idlMap);\n      }\n\n      _populatedWorkspace = true;\n    }\n\n    return workspaceCache[programName];\n  }\n});\n\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n  Object.keys(overrideConfig).forEach(function (programName) {\n    var wsProgramName = camelCase(programName, {\n      pascalCase: true\n    });\n    var overrideAddress = new PublicKey(overrideConfig[programName]);\n    workspaceCache[wsProgramName] = new Program(idlMap.get(programName), overrideAddress);\n  });\n}\n\nexport default workspace;","map":{"version":3,"sources":["../../src/workspace.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nlet _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\nconst workspace = new Proxy({}, {\n    get(workspaceCache, programName) {\n        const find = require(\"find\");\n        const fs = require(\"fs\");\n        const process = require(\"process\");\n        if (typeof window !== \"undefined\") {\n            // Workspaces aren't available in the browser, yet.\n            return undefined;\n        }\n        if (!_populatedWorkspace) {\n            const path = require(\"path\");\n            let projectRoot = process.cwd();\n            while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n                const parentDir = path.dirname(projectRoot);\n                if (parentDir === projectRoot) {\n                    projectRoot = undefined;\n                }\n                projectRoot = parentDir;\n            }\n            if (projectRoot === undefined) {\n                throw new Error(\"Could not find workspace root.\");\n            }\n            const idlMap = new Map();\n            find\n                .fileSync(/target\\/idl\\/.*\\.json/, projectRoot)\n                .reduce((programs, path) => {\n                const idlStr = fs.readFileSync(path);\n                const idl = JSON.parse(idlStr);\n                idlMap.set(idl.name, idl);\n                const name = camelCase(idl.name, { pascalCase: true });\n                if (idl.metadata && idl.metadata.address) {\n                    programs[name] = new Program(idl, new PublicKey(idl.metadata.address));\n                }\n                return programs;\n            }, workspaceCache);\n            // Override the workspace programs if the user put them in the config.\n            const anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n            const clusterId = anchorToml.provider.cluster;\n            if (anchorToml.clusters && anchorToml.clusters[clusterId]) {\n                attachWorkspaceOverride(workspaceCache, anchorToml.clusters[clusterId], idlMap);\n            }\n            _populatedWorkspace = true;\n        }\n        return workspaceCache[programName];\n    },\n});\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n    Object.keys(overrideConfig).forEach((programName) => {\n        const wsProgramName = camelCase(programName, { pascalCase: true });\n        const overrideAddress = new PublicKey(overrideConfig[programName]);\n        workspaceCache[wsProgramName] = new Program(idlMap.get(programName), overrideAddress);\n    });\n}\nexport default workspace;\n//# sourceMappingURL=workspace.js.map"]},"metadata":{},"sourceType":"module"}